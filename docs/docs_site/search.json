[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "In large scale surveys, often complex random mechanisms are used to select samples. Estimations obtained from such samples must reflect the random mechanism to ensure accurate calculations. samplics implements a set of sampling techniques for complex survey designs.\nSampling. Since the full population cannot be observed, a sample is selected to estimate population parameters of interest. The assumption is that the sample is representative of the population for the characteristics of interest. The sample size calculation and selection methods in samplics are:\n\nSample size calculation and allocation: Wald and Fleiss methods for proportions.\nEqual probability of selection: simple random sampling (SRS) and systematic selection (SYS)\nProbability proportional to size (PPS): Systematic, Brewer’s method, Hanurav-Vijayan method, Murphy’s method, and Rao-Sampford’s method.\n\nSample weighting. Sample weighting is the main mechanism used in surveys to formalize the representivity of the sample. The design/base weights are usually adjusted to compensate for distortions due nonresponse and other shortcomings of the the sampling design implementation.\n\nWeight adjustment due to nonresponse\nWeight poststratification, calibration and normalization\nWeight replication i.e. Bootstrap, BRR, and Jackknife\n\nPopulation parameters estimation. The estimation of the parameters of interest must reflect the sampling mechanism and the weight adjustments.\n\nTaylor-based procedures\nReplication-based estimation i.e. Boostrap, BRR, and Jackknife\nRegression-based e.g. generalized regression (GREG)\n\nCategorical data analysis. The estimation of the parameters of interest must reflect the sampling mechanism and the weight adjustments.\n\none-way and two-way tabulation\nT-test including Rao-Scott adjustment\n\nSmall Area Estimation (SAE). When the sample size is not large enough to produce reliable / stable domain level estimates, SAE techniques can be used to model the output variable of interest to produce domain level estimates.\nContact Information  Mamadou S. Diallo  Twiter: @MamadouSDiallo  Email: msdiallo@samplics.org"
  },
  {
    "objectID": "pages/examples.html",
    "href": "pages/examples.html",
    "title": "Objectives",
    "section": "",
    "text": "Show real examples of analysis using Samplics"
  },
  {
    "objectID": "pages/tutorial.html",
    "href": "pages/tutorial.html",
    "title": "Outline",
    "section": "",
    "text": "Note\n\n\n\nThis tutorial is not intended to teach survey sampling methods. To learn survey sampling methods, we refer the user to the reference textbook (Lohr 2021), the UNStats Handbook 2005, Designing Household Survey Samples: Practical Guidelines, and the reference material mentioned throughout this tutorial.\n\n\nThe tutorial is organized into several sections. The sections are fairly independent and users can directly consult the section(s) of interest. However, we recommend that all first time users start with the Section on the Datasets before diving into other sections.\nSection 1: Datasets  Section 2: Sample size calculation      Section 2.1: Sample size for stage design  Section 3: Sample selection  Section 4: Sample weigthing      Section 4.1: Sample weight sdjustment      Section 4.2: Replicate weights  Section 5: Population parameters estimation      Section 5.1: Tabulation      Section 5.2: Unit T-test  Section 6: Categorical data analysis      Section 6.1: Tabulation      Section 6.2: Unit T-test  Section 7: Small area estimation (SAE)      Section 7.1: Area level modeling      Section 7.2: Unit level modeling \n\n\n\n\nReferences\n\nLohr, Sharon L. 2021. Sampling: Design and Analysis, Third Edition. Chapman; Hall/CRC. https://doi.org/https://doi.org/10.1201/9780429298899."
  },
  {
    "objectID": "pages/estimation.html",
    "href": "pages/estimation.html",
    "title": "Overview",
    "section": "",
    "text": "In this tutorial, we demonstrate how to use the Samplics APIs to produce point estimates of mean, total, proportion and ratio parameters as well as their associated Taylor-based and replication-based measures of uncertainty.\nSection 1: Taylor-based Estimation  Section 2: Replicate-based Estimation \nWolter (2007) provides a self-contained description of a number of techniques for variance estimation both Taylor and replication based.\n\n\n\n\nReferences\n\nWolter, Kirk M. 2007. Introduction to Variance Estimation, 2nd edn. Springer-Verlag New York, Inc."
  },
  {
    "objectID": "pages/sae_unit.html",
    "href": "pages/sae_unit.html",
    "title": "Unit Level Modeling",
    "section": "",
    "text": "The Unit Level model refers to a class of SAE techniques that fit the linear mixed model at the sampling unit level. As for the Area Level model, generalized linear mixed models are also the modeling framework for Unit Level model. In this case, given that the model is happening at the sub-area level, both the random effects and unit level standard errors can be estimated from the model. In this tutorial, we will predict the area level means which is a linear parameter.\n\n\nFor this example, we use the county crop data used by Battese, Harter, and Fuller (1988). The datasets contains 37 observations on areas under corn and under soybeans for each of the 12 counties in the north-central of Iowa. Each county was divided in segments and using interviews and LANDSAT satellite data, data on area used for corn and soybeans was obtained. In the unit level data, each observation is a segment with the following variables: county id (county_id), area in hectare under corn (corn_area), area in heactare under soybeans (soybeans_area), number of pixel classified as corn (corn_pixel), and number of pixels classified as soybeans (soybeans_pixel).\n\nfrom samplics.datasets import load_county_crop, load_county_crop_means\nfrom samplics.sae import EblupUnitModel\n\n\n# Load County Crop sample data\ncountycrop_dict = load_county_crop()\ncountycrop = countycrop_dict[\"data\"]\n\nprint(\"First observations from the unit (segment) level crop areas data\")\ncountycrop.head(15)\n\nFirst observations from the unit (segment) level crop areas data\n\n\n\n\n\n\n  \n    \n      \n      county_id\n      corn_area\n      soybeans_area\n      corn_pixel\n      soybeans_pixel\n    \n  \n  \n    \n      0\n      1\n      165.76\n      8.09\n      374\n      55\n    \n    \n      1\n      2\n      96.32\n      106.03\n      209\n      218\n    \n    \n      2\n      3\n      76.08\n      103.60\n      253\n      250\n    \n    \n      3\n      4\n      185.35\n      6.47\n      432\n      96\n    \n    \n      4\n      4\n      116.43\n      63.82\n      367\n      178\n    \n    \n      5\n      5\n      162.08\n      43.50\n      361\n      137\n    \n    \n      6\n      5\n      152.04\n      71.43\n      288\n      206\n    \n    \n      7\n      5\n      161.75\n      42.49\n      369\n      165\n    \n    \n      8\n      6\n      92.88\n      105.26\n      206\n      218\n    \n    \n      9\n      6\n      149.94\n      76.49\n      316\n      221\n    \n    \n      10\n      6\n      64.75\n      174.34\n      145\n      338\n    \n    \n      11\n      7\n      127.07\n      95.67\n      355\n      128\n    \n    \n      12\n      7\n      133.55\n      76.57\n      295\n      147\n    \n    \n      13\n      7\n      77.70\n      93.48\n      223\n      204\n    \n    \n      14\n      8\n      206.39\n      37.84\n      459\n      77\n    \n  \n\n\n\n\nIn addition to the unit (segment) level data, we have the small area (county) level averages of the number of pixels classified as corn or soybeans.\n\n# Load County Crop Area Means sample data\ncountycropmeans_dict = load_county_crop_means()\ncountycrop_means = countycropmeans_dict[\"data\"]\n\nprint(f\"County level crop areas averages\")\ncountycrop_means.head(15)\n\nCounty level crop areas averages\n\n\n\n\n\n\n  \n    \n      \n      county_id\n      samp_segments\n      pop_segments\n      ave_corn_pixel\n      ave_soybeans_pixel\n    \n  \n  \n    \n      0\n      1\n      1\n      545\n      295.29\n      189.70\n    \n    \n      1\n      2\n      1\n      566\n      300.40\n      196.65\n    \n    \n      2\n      3\n      1\n      394\n      289.60\n      205.28\n    \n    \n      3\n      4\n      2\n      424\n      290.74\n      220.22\n    \n    \n      4\n      5\n      3\n      564\n      318.21\n      188.06\n    \n    \n      5\n      6\n      3\n      570\n      257.17\n      247.13\n    \n    \n      6\n      7\n      3\n      402\n      291.77\n      185.37\n    \n    \n      7\n      8\n      3\n      567\n      301.26\n      221.36\n    \n    \n      8\n      9\n      4\n      687\n      262.17\n      247.09\n    \n    \n      9\n      10\n      5\n      569\n      314.28\n      198.66\n    \n    \n      10\n      11\n      5\n      965\n      298.65\n      204.61\n    \n    \n      11\n      12\n      6\n      556\n      325.99\n      177.05\n    \n  \n\n\n\n\n\n\n\nNow we are going to estimates the average area size under corn and soybeans. To do so, we use the nested error linear regression (special case of the linear mixed model) to model the number of hectares. As auxiliary variables, we use the number of pixel classified as corn and soybeans.\nFirst, we use the method fit() to estimate the model parameters.\n\nareas = countycrop[\"county_id\"]\nys = countycrop[\"corn_area\"]\nXs = countycrop[[\"corn_pixel\", \"soybeans_pixel\"]]\nXp_mean = countycrop_means[[\"ave_corn_pixel\", \"ave_corn_pixel\"]]\nsamp_size = countycrop_means[[\"samp_segments\"]]\npop_size = countycrop_means[[\"pop_segments\"]]\n\nimport numpy as np\nareap = np.linspace(1, 12, 12)\n\n\"\"\"REML Method\"\"\"\neblup_bhf_reml = EblupUnitModel()\neblup_bhf_reml.fit(\n    ys,\n    Xs,\n    areas,\n)\n\neblup_bhf_reml.predict(\n    Xmean=Xp_mean,\n    area=areap,\n)\n\ncorn_est_reml = eblup_bhf_reml.to_dataframe()\n\nprint(corn_est_reml)\n\n   _parameter  _area   _estimate        _mse\n0        mean    1.0  119.357558  139.514787\n1        mean    2.0  120.364916  140.131214\n2        mean    3.0  110.530444  114.058730\n3        mean    4.0  112.879489  113.682072\n4        mean    5.0  133.244364  152.310283\n5        mean    6.0  108.640579   75.256679\n6        mean    7.0  113.284824  121.930105\n7        mean    8.0  120.335415  113.394707\n8        mean    9.0  111.072462   67.357524\n9        mean   10.0  120.669683  118.122346\n10       mean   11.0  109.649316   99.856041\n11       mean   12.0  126.735499  148.884533\n\n\n/Users/msdiallo/.pyenv/versions/3.10.5/lib/python3.10/site-packages/statsmodels/base/optimizer.py:17: FutureWarning:\n\nKeyword arguments have been passed to the optimizer that have no effect. The list of allowed keyword arguments for method bfgs is: gtol, norm, epsilon. The list of unsupported keyword arguments passed include: tol. After release 0.14, this will raise.\n\n\n\n\n\"\"\"ML Method\"\"\"\neblup_bhf_ml = EblupUnitModel(method=\"ML\")\neblup_bhf_ml.fit(\n    ys,\n    Xs,\n    areas,\n)\n\neblup_bhf_ml.predict(Xp_mean, areap)\n\ncorn_est_ml = eblup_bhf_ml.to_dataframe()\n\nprint(corn_est_ml)\n\n   _parameter  _area   _estimate        _mse\n0        mean    1.0  118.987340  117.381060\n1        mean    2.0  120.091296  119.200583\n2        mean    3.0  111.315363   96.845753\n3        mean    4.0  113.302456   99.756880\n4        mean    5.0  132.143329  138.775182\n5        mean    6.0  108.072837   67.896678\n6        mean    7.0  113.637097  108.711569\n7        mean    8.0  120.189563  103.560647\n8        mean    9.0  110.480483   62.797278\n9        mean   10.0  120.961246  111.594667\n10       mean   11.0  110.577742   93.776110\n11       mean   12.0  126.790379  139.817391\n\n\n\n\n\nAs shown above, the predict() method provides the taylor-based MSE estimates. However, we can also calculate MSE estimates using the bootstrap approach."
  },
  {
    "objectID": "pages/sae_area.html",
    "href": "pages/sae_area.html",
    "title": "Area Level Modeling",
    "section": "",
    "text": "Small area estimation (SAE) are useful techniques when the sample sizes are not sufficient to provide reliable direct domain estimates given the sampling design. In this tutorial, the direct estimates refer to estimates obtained from the design-based approach. It usually consists of applying adjusted design weights to the variable of interest to compute sample parameters as estimates of equivalent population parameters. When auxiliary information is available, we can use model assisted survey methods can be used to estimate population parameters.\nIn this tutorial, we will go futher and use modeling techniques to produce domains estimates. For the area level model, the modeling is done at the area level using generalized linear mixed models. The sections below shows how to use the EblupAreaModel class from the samplics package to produce area level estimates.\n\n\nTo illustrate the EblupAreaModel class, we will use the Milk Expenditure dataset used in Rao and Molina (2015). As mentioned in the book, this dataset was originally used by Arora and Lahiri (1997) and later by You and Chapman (2006). For the R users, this dataset is also used by the R package sae (https://cran.r-project.org/web/packages/sae/index.html).\nThe Milk Expenditure data contains 43 observations on the average expenditure on fresh milk for the year 1989. The datasets has the following values: major area representing (major_area), small area (small_area), sample size (samp_size), direct survey estimates of average expenditure (direct_est), standard error of the direct estimate (std_error), and coefficient of variation of the direct estimates (coef_variance).\n\nfrom samplics.datasets import load_expenditure_milk\nfrom samplics.sae import EblupAreaModel\n\n\n# Load Expenditure on Milk sample data\nmilk_exp_dict = load_expenditure_milk()\nmilk_exp = milk_exp_dict[\"data\"]\n\nnb_obs = 15\nprint(f\"First {nb_obs} observations of the Milk Expendure dataset\\n\")\nmilk_exp.tail(nb_obs)\n\nFirst 15 observations of the Milk Expendure dataset\n\n\n\n\n\n\n\n  \n    \n      \n      major_area\n      small_area\n      samp_size\n      direct_est\n      std_error\n      coef_var\n    \n  \n  \n    \n      28\n      4\n      29\n      238\n      0.796\n      0.106\n      0.133\n    \n    \n      29\n      4\n      30\n      207\n      0.565\n      0.089\n      0.158\n    \n    \n      30\n      4\n      31\n      165\n      0.886\n      0.225\n      0.254\n    \n    \n      31\n      4\n      32\n      153\n      0.952\n      0.205\n      0.215\n    \n    \n      32\n      4\n      33\n      210\n      0.807\n      0.119\n      0.147\n    \n    \n      33\n      4\n      34\n      383\n      0.582\n      0.067\n      0.115\n    \n    \n      34\n      4\n      35\n      255\n      0.684\n      0.106\n      0.155\n    \n    \n      35\n      4\n      36\n      226\n      0.787\n      0.126\n      0.160\n    \n    \n      36\n      4\n      37\n      224\n      0.440\n      0.092\n      0.209\n    \n    \n      37\n      4\n      38\n      212\n      0.759\n      0.132\n      0.174\n    \n    \n      38\n      4\n      39\n      211\n      0.770\n      0.100\n      0.130\n    \n    \n      39\n      4\n      40\n      179\n      0.800\n      0.113\n      0.141\n    \n    \n      40\n      4\n      41\n      312\n      0.756\n      0.083\n      0.110\n    \n    \n      41\n      4\n      42\n      241\n      0.865\n      0.121\n      0.140\n    \n    \n      42\n      4\n      43\n      205\n      0.640\n      0.129\n      0.202\n    \n  \n\n\n\n\n\n\n\nAs shown in the milk expenditure datasets, some of the coefficients of variation are not small which indicates unstability of the direct survey estimates. Hence, we can try to reduce the variability of the estimates by smoothing them through modeling. For illustration purpose, we will model the average expenditure on milk using the major areas as auxiliary variables.\nFirst, we use the method fit() to estimate the model parameters. The pandas’s method get_dummies() create a matrix with dummy values (0 and 1) from the categorical variable major_area.\n\narea = milk_exp[\"small_area\"]\nyhat = milk_exp[\"direct_est\"]\n\nimport pandas as pd\nX = pd.get_dummies(milk_exp[\"major_area\"],drop_first=True)\nsigma_e = milk_exp[\"std_error\"]\n\n## REML method\nfh_model_reml = EblupAreaModel(method=\"REML\")\nfh_model_reml.fit(\n    yhat=yhat, X=X, area=area, error_std=sigma_e, intercept=True, tol=1e-8,\n)\n\n\nfrom pprint import pprint\n\nprint(f\"The estimated fixed effects are:\") \npprint(fh_model_reml.fixed_effects)\n\nThe estimated fixed effects are:\narray([ 0.96818899,  0.13278031,  0.22694622, -0.24130104])\n\n\n\nprint(\"The estimated standard error of the area random effects is:\")\npprint(fh_model_reml.re_std)\n\nThe estimated standard error of the area random effects is:\n0.13619961509121215\n\n\n\nprint(\"The convergence statistics are:\")\npprint(fh_model_reml.convergence)\n\nThe convergence statistics are:\n{'achieved': True, 'iterations': 7, 'precision': 4.849039732246485e-09}\n\n\n\nprint(\"The goodness of fit statistics are:\") \npprint(fh_model_reml.goodness)\n\nThe goodness of fit statistics are:\n{'AIC': 30.80694883102754,\n 'BIC': 41.37414952518891,\n 'loglike': -9.40347441551377}\n\n\n\nfh_model_reml.predict(\n    X=X, area=area, intercept=True\n)\n\npprint(fh_model_reml.area_est)\n\n{1: 1.0219705448470267,\n 2: 1.047601951883294,\n 3: 1.0679514268850938,\n 4: 0.7608165634164004,\n 5: 0.8461570426977273,\n 6: 0.9743727062092651,\n 7: 1.058452673285536,\n 8: 1.097776256442316,\n 9: 1.2215454913423587,\n 10: 1.1951460164712606,\n 11: 0.7852149170863967,\n 12: 1.2139462074222362,\n 13: 1.2096597223605197,\n 14: 0.9834964402356496,\n 15: 1.1864247095350087,\n 16: 1.155698113523358,\n 17: 1.2263412510186897,\n 18: 1.2856489898727415,\n 19: 1.2363248413266223,\n 20: 1.2349601399238859,\n 21: 1.0903016265233836,\n 22: 1.1923057228469682,\n 23: 1.1216467660137077,\n 24: 1.2230297222963111,\n 25: 1.1938054444127773,\n 26: 0.7627195900552476,\n 27: 0.7649551536523858,\n 28: 0.7338443883489099,\n 29: 0.7699295545743624,\n 30: 0.6134416227081898,\n 31: 0.7695560730689726,\n 32: 0.7958253128224173,\n 33: 0.7723188482183632,\n 34: 0.6102300678743073,\n 35: 0.7001781895145354,\n 36: 0.7592788108093529,\n 37: 0.5298863352267296,\n 38: 0.7434466782997071,\n 39: 0.75489963338527,\n 40: 0.7701919661644314,\n 41: 0.7481164240189863,\n 42: 0.8040775166023048,\n 43: 0.6810868846993623}\n\n\nWe can use the utility method to_dataframe() to output the estimates as a pandas dataframe. The function provides the area, the estimate and its MSE estimates. We can use col_names to customize the name of the columns. For example, using col_names = [\"small_area\", \"eblup_estimate\", \"eblup_mse\"]. Otherwise, if col_names is not provided, “_area”, “_estimates” and “_mse” are used as defaults.\n\nmilk_est_reml = fh_model_reml.to_dataframe(\n    col_names = [\"parameter\", \"small_area\", \"eblup_estimate\", \"eblup_mse\"]\n    )\nprint(\"The dataframe version of the area level estimates:\")\nprint(milk_est_reml)\n\nThe dataframe version of the area level estimates:\n   parameter  small_area  eblup_estimate  eblup_mse\n0       mean           1        1.021971   0.013460\n1       mean           2        1.047602   0.005373\n2       mean           3        1.067951   0.005702\n3       mean           4        0.760817   0.008542\n4       mean           5        0.846157   0.009580\n5       mean           6        0.974373   0.011671\n6       mean           7        1.058453   0.015926\n7       mean           8        1.097776   0.010587\n8       mean           9        1.221545   0.014184\n9       mean          10        1.195146   0.014902\n10      mean          11        0.785215   0.007694\n11      mean          12        1.213946   0.016337\n12      mean          13        1.209660   0.012563\n13      mean          14        0.983496   0.012117\n14      mean          15        1.186425   0.012031\n15      mean          16        1.155698   0.011709\n16      mean          17        1.226341   0.010860\n17      mean          18        1.285649   0.013691\n18      mean          19        1.236325   0.011035\n19      mean          20        1.234960   0.013080\n20      mean          21        1.090302   0.009949\n21      mean          22        1.192306   0.017244\n22      mean          23        1.121647   0.011292\n23      mean          24        1.223030   0.013625\n24      mean          25        1.193805   0.008066\n25      mean          26        0.762720   0.009205\n26      mean          27        0.764955   0.009205\n27      mean          28        0.733844   0.016477\n28      mean          29        0.769930   0.007801\n29      mean          30        0.613442   0.006099\n30      mean          31        0.769556   0.015442\n31      mean          32        0.795825   0.014658\n32      mean          33        0.772319   0.009025\n33      mean          34        0.610230   0.003871\n34      mean          35        0.700178   0.007801\n35      mean          36        0.759279   0.009646\n36      mean          37        0.529886   0.006404\n37      mean          38        0.743447   0.010156\n38      mean          39        0.754900   0.007210\n39      mean          40        0.770192   0.008470\n40      mean          41        0.748116   0.005485\n41      mean          42        0.804078   0.009205\n42      mean          43        0.681087   0.009904\n\n\nWe could also fit the model parameters using the maximum likelihood (ML) method which will impact the MSE estimation as well. To estimate the area means using the ML methdo, we only need to set method=“ML” then run the prediction as follows.\n\n## ML method\nfh_model_ml = EblupAreaModel(method=\"ML\")\nfh_model_ml.fit(\n    yhat=yhat, X=X, area=area, error_std=sigma_e, intercept=True, tol=1e-8,\n)\n\nmilk_est_ml = fh_model_ml.predict(\n    X=X, area=area, intercept=True\n)\n\nmilk_est_ml = fh_model_ml.to_dataframe(\n    col_names = [\"parameter\", \"small_area\", \"eblup_estimate\", \"eblup_mse\"]\n    )\n\n\nprint(\"The dataframe version of the ML area level estimates:\")\nprint(milk_est_ml)\n\nThe dataframe version of the ML area level estimates:\n   parameter  small_area  eblup_estimate  eblup_mse\n0       mean           1        1.016173   0.013580\n1       mean           2        1.043697   0.005513\n2       mean           3        1.062817   0.005851\n3       mean           4        0.775349   0.008735\n4       mean           5        0.855490   0.009775\n5       mean           6        0.973586   0.011841\n6       mean           7        1.047478   0.015934\n7       mean           8        1.095344   0.010822\n8       mean           9        1.205409   0.014346\n9       mean          10        1.181256   0.015036\n10      mean          11        0.803370   0.007911\n11      mean          12        1.196775   0.016405\n12      mean          13        1.196159   0.012771\n13      mean          14        0.991405   0.012335\n14      mean          15        1.186883   0.012192\n15      mean          16        1.159036   0.011877\n16      mean          17        1.223237   0.011041\n17      mean          18        1.275519   0.013805\n18      mean          19        1.232285   0.011214\n19      mean          20        1.230442   0.013214\n20      mean          21        1.098577   0.010138\n21      mean          22        1.192160   0.017194\n22      mean          23        1.127992   0.011468\n23      mean          24        1.219628   0.013742\n24      mean          25        1.193626   0.008251\n25      mean          26        0.759065   0.009345\n26      mean          27        0.761123   0.009345\n27      mean          28        0.731565   0.016390\n28      mean          29        0.766273   0.007942\n29      mean          30        0.619145   0.006222\n30      mean          31        0.762939   0.015404\n31      mean          32        0.786375   0.014656\n32      mean          33        0.767978   0.009165\n33      mean          34        0.614135   0.003947\n34      mean          35        0.701311   0.007942\n35      mean          36        0.755756   0.009782\n36      mean          37        0.540665   0.006532\n37      mean          38        0.741132   0.010286\n38      mean          39        0.752451   0.007347\n39      mean          40        0.766242   0.008613\n40      mean          41        0.746536   0.005598\n41      mean          42        0.797140   0.009345\n42      mean          43        0.684098   0.010037\n\n\nSimilar, we can use the Fay-Herriot method as follows\n\n## FH method\nfh_model_fh = EblupAreaModel(method=\"FH\")\nfh_model_fh.fit(\n    yhat=yhat, X=X, area=area, error_std=sigma_e, intercept=True, tol=1e-8,\n)\n\nmilk_est_fh = fh_model_fh.predict(\n    X=X, area=area, intercept=True\n)\n\nmilk_est_fh = fh_model_fh.to_dataframe(col_names = [\"parameter\", \"small_area\", \"eblup_estimate\", \"eblup_mse\"])\n\n\nprint(f\"The dataframe version of the ML area level estimates:\")\nprint(milk_est_fh)\n\nThe dataframe version of the ML area level estimates:\n   parameter  small_area  eblup_estimate  eblup_mse\n0       mean           1        1.017976   0.012757\n1       mean           2        1.044964   0.005314\n2       mean           3        1.064481   0.005632\n3       mean           4        0.770692   0.008323\n4       mean           5        0.852512   0.009284\n5       mean           6        0.973826   0.011178\n6       mean           7        1.050857   0.014868\n7       mean           8        1.096165   0.010253\n8       mean           9        1.210505   0.013471\n9       mean          10        1.185640   0.014095\n10      mean          11        0.797569   0.007558\n11      mean          12        1.202150   0.015325\n12      mean          13        1.200459   0.012039\n13      mean          14        0.988971   0.011640\n14      mean          15        1.186745   0.011467\n15      mean          16        1.157992   0.011182\n16      mean          17        1.224223   0.010424\n17      mean          18        1.278680   0.012914\n18      mean          19        1.233566   0.010581\n19      mean          20        1.231860   0.012386\n20      mean          21        1.095955   0.009600\n21      mean          22        1.192213   0.015890\n22      mean          23        1.125997   0.010811\n23      mean          24        1.220695   0.012858\n24      mean          25        1.193687   0.007865\n25      mean          26        0.760244   0.008855\n26      mean          27        0.762358   0.008855\n27      mean          28        0.732288   0.015042\n28      mean          29        0.767459   0.007569\n29      mean          30        0.617310   0.005975\n30      mean          31        0.764997   0.014212\n31      mean          32        0.789315   0.013572\n32      mean          33        0.769376   0.008692\n33      mean          34        0.612861   0.003833\n34      mean          35        0.700962   0.007569\n35      mean          36        0.756891   0.009253\n36      mean          37        0.537193   0.006264\n37      mean          38        0.741882   0.009709\n38      mean          39        0.753251   0.007020\n39      mean          40        0.767519   0.008186\n40      mean          41        0.747059   0.005391\n41      mean          42        0.799363   0.008855\n42      mean          43        0.683161   0.009484"
  },
  {
    "objectID": "pages/selection_ssus.html",
    "href": "pages/selection_ssus.html",
    "title": "Selection of SSUs",
    "section": "",
    "text": "Before starting the second stage selection, let us import the data from the first stage sampling information that is the first stage sample (psu_sample). For clarity, we explicitly import the packages and modules needed for this notebook.\n\nimport numpy as np \nimport pandas as pd \nfrom samplics.sampling import SampleSelection\n\n# Load the selected PSUs \npsu_frame = pd.read_csv(\"./psu_frame.csv\")\n\nIn this tutorial, we will simulate the second stage frame. For the simulation, assume that the psu frame was obtained from a previous census conducted several years before. We also assume that, the change in the number of households since the previous census follows a normal distribution with a mean equal to 5% higher than the census value and a variance of 0.15 times the number of households from the census. Under these assumptions, we generate the following second stage frame of households. Note that the frame is created only for the selected PSUs.\n\n# Create a synthetic second stage frame\ncensus_size = psu_frame.loc[\n    psu_frame[\"psu_sample\"] == 1, \n    \"number_households_census\"\n].values\nstratum_names = psu_frame.loc[\n    psu_frame[\"psu_sample\"] == 1, \n    \"region\"\n    ].values\ncluster = psu_frame.loc[psu_frame[\"psu_sample\"] == 1, \"cluster\"].values\n\nnp.random.seed(15)\n\nlisting_size = np.zeros(census_size.size)\nfor k in range(census_size.size):\n    listing_size[k] = np.random.normal(\n        1.05 * census_size[k], 0.15 * census_size[k]\n        )\n\nlisting_size = listing_size.astype(int)\nhh_id = rr_id = cl_id = []\nfor k, s in enumerate(listing_size):\n    hh_k1 = np.char.array(np.repeat(stratum_names[k], s)).astype(str)\n    hh_k2 = np.char.array(np.arange(1, s + 1)).astype(str)\n    cl_k = np.repeat(cluster[k], s)\n    hh_k = np.char.add(np.char.array(cl_k).astype(str), hh_k2)\n    hh_id = np.append(hh_id, hh_k)\n    rr_id = np.append(rr_id, hh_k1)\n    cl_id = np.append(cl_id, cl_k)\n\nssu_frame = pd.DataFrame(cl_id.astype(int))\nssu_frame.rename(columns={0: \"cluster\"}, inplace=True)\nssu_frame[\"region\"] = rr_id\nssu_frame[\"household\"] = hh_id\n\nnb_obs = 15\nprint(f\"\\nFirst {nb_obs} observations of the SSU frame\\n\")\nssu_frame.head(nb_obs)\n\n\nFirst 15 observations of the SSU frame\n\n\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      household\n    \n  \n  \n    \n      0\n      7\n      North\n      71\n    \n    \n      1\n      7\n      North\n      72\n    \n    \n      2\n      7\n      North\n      73\n    \n    \n      3\n      7\n      North\n      74\n    \n    \n      4\n      7\n      North\n      75\n    \n    \n      5\n      7\n      North\n      76\n    \n    \n      6\n      7\n      North\n      77\n    \n    \n      7\n      7\n      North\n      78\n    \n    \n      8\n      7\n      North\n      79\n    \n    \n      9\n      7\n      North\n      710\n    \n    \n      10\n      7\n      North\n      711\n    \n    \n      11\n      7\n      North\n      712\n    \n    \n      12\n      7\n      North\n      713\n    \n    \n      13\n      7\n      North\n      714\n    \n    \n      14\n      7\n      North\n      715\n    \n  \n\n\n\n\n\npsu_sample = psu_frame.loc[psu_frame[\"psu_sample\"] == 1]\nssu_counts = ssu_frame.groupby(\"cluster\").count()\nssu_counts.drop(columns=\"region\", inplace=True)\nssu_counts.reset_index(inplace=True)\nssu_counts.rename(\n    columns={\"household\": \"number_households_listed\"}, \n    inplace=True\n    )\n\npd.merge(\n    psu_sample[[\"cluster\", \"region\", \"number_households_census\"]],\n    ssu_counts[[\"cluster\", \"number_households_listed\"]],\n    on=[\"cluster\"],\n)\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      number_households_census\n      number_households_listed\n    \n  \n  \n    \n      0\n      7\n      North\n      130\n      130\n    \n    \n      1\n      10\n      North\n      600\n      660\n    \n    \n      2\n      16\n      South\n      190\n      195\n    \n    \n      3\n      24\n      South\n      75\n      73\n    \n    \n      4\n      29\n      South\n      200\n      217\n    \n    \n      5\n      34\n      East\n      305\n      239\n    \n    \n      6\n      45\n      East\n      450\n      398\n    \n    \n      7\n      52\n      East\n      700\n      620\n    \n    \n      8\n      64\n      West\n      300\n      301\n    \n    \n      9\n      86\n      West\n      280\n      274\n    \n  \n\n\n\n\nAccording to the simulated second stage frame, we get the same number of households in cluster 7 as the census. However, in strata 10, 16, 29, and 64, we listed more households than during than the census. And finally, we found less households in the remaining clusters than the census.\nNow that we have a second stage frame, let’s use samplics to calculate the probabilities of selection and to select a sample. The second stage sample size is 150 households and the strategy is to select 15 households per cluster.\n\nSSU (household) Probability of Selection\nThe second stage probabilities of selection are conditional on the first stage realization. For this stage, simple random selection (srs) and systematic selection(sys) are common methods used to select households. For this example, we use srs to select 15 households from each cluster. Conditionally to teh first stage, the second stage selection is a stratified srs where the clusters are the strata. More generally, we have that \\[\\begin{equation} p_{hij} = \\frac{m_{hi}}{M_{hi}^{'}} \\end{equation}\\] where \\(p_{hij}\\) is the conditional probability of selection for unit \\(j\\) from stratum \\(h\\) and cluster \\(j\\), \\(m_{hi}\\) and \\(M_{hi}^{'}\\) are the sample size and the number of secondary sampling units listed for stratum \\(h\\) and cluster \\(j\\), respectively.\nIn this scenario, sample size is the same in each stratum. Hence, the parameter sample_size does not need to be a Python dictionary; we will only provide 15 in the function call.\n\nstage2_design = SampleSelection(\n    method=\"srs\", stratification=True, with_replacement=False\n)\n\nssu_frame[\"ssu_prob\"] = stage2_design.inclusion_probs(\n    ssu_frame[\"household\"], 15, ssu_frame[\"cluster\"]\n)\n\nssu_frame.sample(20)\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      household\n      ssu_prob\n    \n  \n  \n    \n      1438\n      34\n      East\n      34164\n      0.062762\n    \n    \n      2517\n      52\n      East\n      52606\n      0.024194\n    \n    \n      2943\n      86\n      West\n      86111\n      0.054745\n    \n    \n      3002\n      86\n      West\n      86170\n      0.054745\n    \n    \n      559\n      10\n      North\n      10430\n      0.022727\n    \n    \n      1216\n      29\n      South\n      29159\n      0.069124\n    \n    \n      2751\n      64\n      West\n      64220\n      0.049834\n    \n    \n      412\n      10\n      North\n      10283\n      0.022727\n    \n    \n      2549\n      64\n      West\n      6418\n      0.049834\n    \n    \n      1508\n      34\n      East\n      34234\n      0.062762\n    \n    \n      1517\n      45\n      East\n      454\n      0.037688\n    \n    \n      2658\n      64\n      West\n      64127\n      0.049834\n    \n    \n      1072\n      29\n      South\n      2915\n      0.069124\n    \n    \n      1074\n      29\n      South\n      2917\n      0.069124\n    \n    \n      1669\n      45\n      East\n      45156\n      0.037688\n    \n    \n      1286\n      34\n      East\n      3412\n      0.062762\n    \n    \n      1162\n      29\n      South\n      29105\n      0.069124\n    \n    \n      1051\n      24\n      South\n      2467\n      0.205479\n    \n    \n      3085\n      86\n      West\n      86253\n      0.054745\n    \n    \n      2148\n      52\n      East\n      52237\n      0.024194\n    \n  \n\n\n\n\n\nSSU (household) Selection\nThe second stage sample is selected from the SSU frame (ssu_frame) using the variable cluster as the stratification variable. The sample is selected without replacement according to the specification of the second stage design. Hence, both ssu_sample and ssu_hits sum to 150 and each selected household was hit only ounce (i.e. ssu_hits = 1).\n\nnp.random.seed(11)\nssu_sample, ssu_hits, ssu_probs = stage2_design.select(\n    ssu_frame[\"household\"], 15, ssu_frame[\"cluster\"]\n)\n\nssu_frame[\"ssu_sample\"] = ssu_sample\nssu_frame[\"ssu_hits\"] = ssu_hits\nssu_frame[\"ssu_probs\"] = ssu_probs\n\nssu_frame[ssu_frame[\"ssu_sample\"] == 1].sample(15)\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      household\n      ssu_prob\n      ssu_sample\n      ssu_hits\n      ssu_probs\n    \n  \n  \n    \n      2319\n      52\n      East\n      52408\n      0.024194\n      True\n      1\n      0.024194\n    \n    \n      2931\n      86\n      West\n      8699\n      0.054745\n      True\n      1\n      0.054745\n    \n    \n      2642\n      64\n      West\n      64111\n      0.049834\n      True\n      1\n      0.049834\n    \n    \n      122\n      7\n      North\n      7123\n      0.115385\n      True\n      1\n      0.115385\n    \n    \n      60\n      7\n      North\n      761\n      0.115385\n      True\n      1\n      0.115385\n    \n    \n      945\n      16\n      South\n      16156\n      0.076923\n      True\n      1\n      0.076923\n    \n    \n      338\n      10\n      North\n      10209\n      0.022727\n      True\n      1\n      0.022727\n    \n    \n      2218\n      52\n      East\n      52307\n      0.024194\n      True\n      1\n      0.024194\n    \n    \n      2870\n      86\n      West\n      8638\n      0.054745\n      True\n      1\n      0.054745\n    \n    \n      1764\n      45\n      East\n      45251\n      0.037688\n      True\n      1\n      0.037688\n    \n    \n      630\n      10\n      North\n      10501\n      0.022727\n      True\n      1\n      0.022727\n    \n    \n      1441\n      34\n      East\n      34167\n      0.062762\n      True\n      1\n      0.062762\n    \n    \n      986\n      24\n      South\n      242\n      0.205479\n      True\n      1\n      0.205479\n    \n    \n      1796\n      45\n      East\n      45283\n      0.037688\n      True\n      1\n      0.037688\n    \n    \n      1264\n      29\n      South\n      29207\n      0.069124\n      True\n      1\n      0.069124\n    \n  \n\n\n\n\nLet’s check that both ssu_sample and ssu_hits sum to 150 and each selected household was hit only ounce (i.e. ssu_hits = 1).\n\n\nprint(f\"The sum of `ssu_sample` is equal to: {ssu_frame['ssu_sample'].sum()}\\n\")\n\nThe sum of `ssu_sample` is equal to: 150\n\n\n\n\nprint(f\"The sum of `ssu_hits` is equal to: {ssu_frame['ssu_hits'].sum()}\\n\")\n\nThe sum of `ssu_hits` is equal to: 150\n\n\n\n\nprint(f\"The values of `ssu_hits` are: {np.unique(ssu_frame['ssu_hits']).tolist()}\\n\")\n\nThe values of `ssu_hits` are: [0, 1]\n\n\n\n\nTo use systematic selection, we just need to replace method=\"srs\" by method=\"sys\".\nAnother common approach is to use a rate for selecting the sample. Instead of selecting 15 households from 130 in the first cluster, we may want to select with a rate of 15/130, and similarly for the other clusters.\n\nrates = np.repeat(15, 10) / ssu_counts[\"number_households_listed\"].values\nssu_rates = dict(zip(np.unique(ssu_frame[\"cluster\"]), rates))\nssu_rates\n\n{7: 0.11538461538461539,\n 10: 0.022727272727272728,\n 16: 0.07692307692307693,\n 24: 0.2054794520547945,\n 29: 0.06912442396313365,\n 34: 0.06276150627615062,\n 45: 0.03768844221105527,\n 52: 0.024193548387096774,\n 64: 0.04983388704318937,\n 86: 0.05474452554744526}\n\n\n\nnp.random.seed(22)\n\nstage2_design2 = SampleSelection(\n    method=\"sys\", stratification=True, with_replacement=False\n)\n\nssu_sample_r, ssu_hits_r, _ = stage2_design2.select(\n    ssu_frame[\"household\"], \n    stratum=ssu_frame[\"cluster\"], \n    samp_rate=ssu_rates\n)\n\nssu_sample2 = pd.DataFrame(\n    data={\n        \"household\": ssu_frame[\"household\"],\n        \"ssu_sample_r\": ssu_sample_r,\n        \"ssu_hits_r\": ssu_hits_r,\n    }\n)\n\nssu_sample2.head(25)\n\n\n\n\n\n  \n    \n      \n      household\n      ssu_sample_r\n      ssu_hits_r\n    \n  \n  \n    \n      0\n      71\n      0\n      0\n    \n    \n      1\n      72\n      0\n      0\n    \n    \n      2\n      73\n      0\n      0\n    \n    \n      3\n      74\n      0\n      0\n    \n    \n      4\n      75\n      0\n      0\n    \n    \n      5\n      76\n      1\n      1\n    \n    \n      6\n      77\n      0\n      0\n    \n    \n      7\n      78\n      0\n      0\n    \n    \n      8\n      79\n      0\n      0\n    \n    \n      9\n      710\n      0\n      0\n    \n    \n      10\n      711\n      0\n      0\n    \n    \n      11\n      712\n      0\n      0\n    \n    \n      12\n      713\n      0\n      0\n    \n    \n      13\n      714\n      1\n      1\n    \n    \n      14\n      715\n      0\n      0\n    \n    \n      15\n      716\n      0\n      0\n    \n    \n      16\n      717\n      0\n      0\n    \n    \n      17\n      718\n      0\n      0\n    \n    \n      18\n      719\n      0\n      0\n    \n    \n      19\n      720\n      0\n      0\n    \n    \n      20\n      721\n      0\n      0\n    \n    \n      21\n      722\n      1\n      1\n    \n    \n      22\n      723\n      0\n      0\n    \n    \n      23\n      724\n      0\n      0\n    \n    \n      24\n      725\n      0\n      0\n    \n  \n\n\n\n\nLet’s store the first and second stages samples.\n\n# First stage sample\npsu_sample[[\"cluster\", \"region\", \"psu_prob\"]].to_csv(\"psu_sample.csv\")\n\n# Second stage sample\nssu_sample = ssu_frame.loc[ssu_frame[\"ssu_sample\"] == 1]\nssu_sample[[\"cluster\", \"household\", \"ssu_prob\"]].to_csv(\"ssu_sample.csv\")"
  },
  {
    "objectID": "pages/categorical_ttest.html",
    "href": "pages/categorical_ttest.html",
    "title": "T-test",
    "section": "",
    "text": "Comparison of one-sample mean to a known mean\nComparison of two groups from the same sample\nComparison of two means from two different samples\nComparison of two paired means\n\nTtest() is the class that implements all four type of comparisons. To run a comparison, the user call the method compare() with the appropriate parameters.\n\nfrom pprint import pprint\n\nfrom samplics.datasets import load_auto\nfrom samplics.categorical.comparison import Ttest\n\n\nComparison of one-sample mean to a knowm mean\nFor this comparison, the mean of a continuous variable, i.e. mpg, is compared to a know mean. In the example below, the user is testing whether the average mpg is equal to 20. Hence, the null hypothesis is H0: mean(mpg) = 20. There are three possible alternatives for this null hypotheses:\n\nHa: mean(mpg) < 20 (less_than alternative)\nHa: mean(mpg) > 20 (greater_than alternative)\nHa: mean(mpg) != 20 (not_equal alternative)\n\nAll three alternatives are automatically computed by the method compare(). This behavior is similar across the four type of comparisons.\n\n# Load Auto sample data\nauto_dict = load_auto()\nauto = auto_dict[\"data\"]\nmpg = auto[\"mpg\"]\n\none_sample_known_mean = Ttest(samp_type=\"one-sample\")\none_sample_known_mean.compare(y=mpg, known_mean=20)\n\nprint(one_sample_known_mean)\n\n\nDesign-based One-Sample T-test\n Null hypothesis (Ho): mean = 20\n t statictics: 1.9289\n Degrees of freedom: 73.00\n Alternative hypothesis (Ha):\n  Prob(T < t) = 0.9712\n  Prob(|T| > |t|) = 0.0576\n  Prob(T > t) = 0.0288 \n\n Nb. Obs      Mean  Std. Error  Std. Dev.  Lower CI  Upper CI\n      74 21.297297    0.672551   5.785503 19.956905  22.63769\n\n\n\nThe print below shows the information encapsulated in the object. point_est provides the sample mean. Similarly, stderror, stddev, lower_ci, and upper_ci provide the standard error, standard deviation, lower bound confidence interval (CI), and upper bound CI, respectively. The class member stats provides the statistics related to the three t-tests (for the three alternative hypothesis). There is additional information encapsulated in the object as shown below.\n\npprint(one_sample_known_mean.__dict__)\n\n{'alpha': 0.05,\n 'deff': {},\n 'group_levels': {},\n 'group_names': [],\n 'lower_ci': 19.956904913980306,\n 'paired': False,\n 'point_est': 21.2972972972973,\n 'samp_type': 'one-sample',\n 'stats': {'df': 73,\n           'known_mean': 20,\n           'number_obs': 74,\n           'p_value': {'greater_than': 0.02881433507499831,\n                       'less_than': 0.9711856649250017,\n                       'not_equal': 0.05762867014999661},\n           't': 1.9289200809064198},\n 'stddev': 5.785503209735141,\n 'stderror': 0.6725510870764976,\n 'upper_ci': 22.63768968061429,\n 'vars_names': ['mpg']}\n\n\n\n\nComparison of two groups from the same sample\nThis type of comparison is used when the two groups are from the sample. For example, after running a survey, the user want to know if the domestic cars have the same mpg on average compare to the foreign cars. The parameter group indicates the categorical variable. NB: note that, at this point, Ttest() does not take into account potential dependencies between groups.\n\nforeign = auto[\"foreign\"]\n\none_sample_two_groups = Ttest(samp_type=\"one-sample\")\none_sample_two_groups.compare(y=mpg, group=foreign)\n\nprint(one_sample_two_groups)\n\n\nDesign-based One-Sample T-test\n Null hypothesis (Ho): mean(Domestic) = mean(Foreign) \n Equal variance assumption:\n  t statictics: -3.6632\n  Degrees of freedom: 72.00\n  Alternative hypothesis (Ha):\n   Prob(T < t) = 0.0002\n   Prob(|T| > |t|) = 0.0005\n   Prob(T > t) = 0.9998\n Unequal variance assumption:\n  t statictics: -3.2245\n  Degrees of freedom: 30.81\n  Alternative hypothesis (Ha):\n   Prob(T < t) = 0.0015\n   Prob(|T| > |t|) = 0.0030\n   Prob(T > t) = 0.9985 \n\n   Group  Nb. Obs      Mean  Std. Error  Std. Dev.  Lower CI  Upper CI\nDomestic       52 19.826923    0.655868   4.729532 18.519780 21.134066\n Foreign       22 24.772727    1.386503   6.503276 22.009431 27.536024\n\n\n\nSince there are two groups for this comparison, the sample mean, standard error, standard deviation, lower bound CI, and upper bound CI are provided by group as Python dictionaries. The class member stats provides statistics for the comparison assuming both equal and unequal variances.\n\nprint(\"These are the group means for mpg:\")\npprint(one_sample_two_groups.point_est)\n\nThese are the group means for mpg:\n{'Domestic': 19.826923076923077, 'Foreign': 24.772727272727273}\n\n\n\nprint(f\"These are the group standard error for mpg:\")\npprint(one_sample_two_groups.stderror)\n\nThese are the group standard error for mpg:\n{'Domestic': 0.6558681110509441, 'Foreign': 1.3865030562044942}\n\n\n\nprint(\"These are the group standard deviation for mpg:\")\npprint(one_sample_two_groups.stddev)\n\nThese are the group standard deviation for mpg:\n{'Domestic': 4.7295322086717775, 'Foreign': 6.50327578586491}\n\n\n\nprint(\"These are the computed statistics:\")\npprint(one_sample_two_groups.stats)\n\nThese are the computed statistics:\n{'df_eq_variance': 72,\n 'df_uneq_variance': 30.814287872636015,\n 'number_obs': {'Domestic': 52, 'Foreign': 22},\n 'p_value_eq_variance': {'greater_than': 0.9997637712766184,\n                         'less_than': 0.00023622872338158258,\n                         'not_equal': 0.00047245744676316517},\n 'p_value_uneq_variance': {'greater_than': 0.9985090924569335,\n                           'less_than': 0.00149090754306649,\n                           'not_equal': 0.00298181508613298},\n 't_eq_variance': -3.663245852011623,\n 't_uneq_variance': -3.2245353733260638}\n\n\n\n\nComparison of two means from two different samples\nThis type of comparison should be used when the two groups come from different samples or different strata. The group are assumed independent. Otherwise, the information is similar to the previous test. Note that, when instantiating the class, we used samp_type=\"two-sample\".\n\ntwo_samples_unpaired = Ttest(samp_type=\"two-sample\", paired=False)\ntwo_samples_unpaired.compare(y=mpg, group=foreign)\n\nprint(two_samples_unpaired)\n\n\nDesign-based Two-Sample T-test\n Null hypothesis (Ho): mean(Domestic) = mean(Foreign) \n Equal variance assumption:\n  t statictics: -3.6308\n  Degrees of freedom: 72.00\n  Alternative hypothesis (Ha):\n   Prob(T < t) = 0.0003\n   Prob(|T| > |t|) = 0.0005\n   Prob(T > t) = 0.9997\n Unequal variance assumption:\n  t statictics: -3.1797\n  Degrees of freedom: 30.55\n  Alternative hypothesis (Ha):\n   Prob(T < t) = 0.0017\n   Prob(|T| > |t|) = 0.0034\n   Prob(T > t) = 0.9983 \n\n   Group  Nb. Obs      Mean  Std. Error  Std. Dev.  Lower CI  Upper CI\nDomestic       52 19.826923    0.657777   4.743297 18.506381 21.147465\n Foreign       22 24.772727    1.409510   6.611187 21.841491 27.703963\n\n\n\n\nprint(\"These are the group means for mpg:\")\npprint(two_samples_unpaired.point_est)\n\nThese are the group means for mpg:\n{'Domestic': 19.826923076923077, 'Foreign': 24.772727272727273}\n\n\n\nprint(\"These are the group standard error for mpg:\") \npprint(two_samples_unpaired.stderror)\n\nThese are the group standard error for mpg:\n{'Domestic': 0.6577769784877484, 'Foreign': 1.409509782735444}\n\n\n\nprint(\"These are the group standard deviation for mpg:\")\npprint(two_samples_unpaired.stddev)\n\nThese are the group standard deviation for mpg:\n{'Domestic': 4.7432972475147, 'Foreign': 6.611186898567625}\n\n\n\nprint(\"These are the computed statistics:\")\npprint(two_samples_unpaired.stats)\n\nThese are the computed statistics:\n{'df_eq_variance': 72,\n 'df_uneq_variance': 30.546277725121076,\n 'number_obs': {'Domestic': 52, 'Foreign': 22},\n 'p_value_eq_variance': {'greater_than': 0.9997372920330829,\n                         'less_than': 0.00026270796691710003,\n                         'not_equal': 0.0005254159338342001},\n 'p_value_uneq_variance': {'greater_than': 0.9983149592187673,\n                           'less_than': 0.0016850407812326069,\n                           'not_equal': 0.0033700815624652138},\n 't_eq_variance': -3.6308484477318372,\n 't_uneq_variance': -3.1796851846684073}\n\n\n\n\nComparison of two paired means\nWhen two measures are taken from the same observations, the paired t-test is appropriate for comparing the means.\n\ntwo_samples_paired = Ttest(samp_type=\"two-sample\", paired=True)\ntwo_samples_paired.compare(y=auto[[\"y1\", \"y2\"]], group=foreign)\n\nprint(two_samples_paired)\n\n\nDesign-based Two-Sample T-test\n Null hypothesis (Ho): mean(Diff = y1 - y2) = 0\n t statictics: 0.8733\n Degrees of freedom: 73.00\n Alternative hypothesis (Ha):\n  Prob(T < t) = 0.8073\n  Prob(|T| > |t|) = 0.3853\n  Prob(T > t) = 0.1927 \n\n Nb. Obs         Mean   Std. Error  Std. Dev.      Lower CI  Upper CI\n      74 4.054054e-07 4.641962e-07   0.000004 -5.197363e-07  0.000001\n\n\n\nvarnames can be used rename the variables\n\ny1 = auto[\"y1\"]\ny2 = auto[\"y2\"]\n\ntwo_samples_paired = Ttest(samp_type=\"two-sample\", paired=True)\ntwo_samples_paired.compare(\n    y=[y1, y2], \n    varnames= [\"group_1\", \"gourp_2\"], \n    group=foreign\n    )\n\nprint(two_samples_paired)\n\n\nDesign-based Two-Sample T-test\n Null hypothesis (Ho): mean(Diff = group_1 - gourp_2) = 0\n t statictics: 0.8733\n Degrees of freedom: 73.00\n Alternative hypothesis (Ha):\n  Prob(T < t) = 0.8073\n  Prob(|T| > |t|) = 0.3853\n  Prob(T > t) = 0.1927 \n\n Nb. Obs         Mean   Std. Error  Std. Dev.      Lower CI  Upper CI\n      74 4.054054e-07 4.641962e-07   0.000004 -5.197363e-07  0.000001"
  },
  {
    "objectID": "pages/sae.html",
    "href": "pages/sae.html",
    "title": "Overview",
    "section": "",
    "text": "Section 1: Area level modeling  Section 2: Unit level modeling \nGeneralized linear mixed model are the statistical framework used to develop the SAE methods, for an introduction to GLMM see McCulloch, Searle, and Neuhaus (2008). For a comprehensive review of the small area estimation models and its applications, see Rao and Molina (2015).\n\n\n\n\nReferences\n\nMcCulloch, C E, S R Searle, and J M Neuhaus. 2008. Generalized, Linear, and Mixed Models. New York: John Wiley; Sons.\n\n\nRao, J. N. K., and I Molina. 2015. Small Area Estimation, 2nd edn. John Wiley & Sons, Hoboken, New Jersey."
  },
  {
    "objectID": "pages/getting_started.html",
    "href": "pages/getting_started.html",
    "title": "Getting Started",
    "section": "",
    "text": "Installation\n\npip install samplics\n\nif both Python 2.x and python 3.x are installed on your computer, you may have to use:\n\npip3 install samplics\n\n\n\nDependencies\nPython versions 3.7.x or newer and the following packages:\n\nnumpy\npandas\nscipy\nstatsmodels\n\n\n\nUsage\nTo select a sample of primary sampling units using PPS method, we can use a code similar to:\n\nimport samplics\nfrom samplics.sampling import SampleSelection\n\npsu_frame = pd.read_csv(\"psu_frame.csv\")\npsu_sample_size = {\"East\":3, \"West\": 2, \"North\": 2, \"South\": 3}\n\npps_design = SampleSelection(\n    method=\"pps-sys\", stratification=True, with_replacement=False\n    )\n\nframe[\"psu_prob\"] = pps_design.inclusion_probs(\n    psu_frame[\"cluster\"],\n    psu_sample_size,\n    psu_frame[\"region\"],\n    psu_frame[\"number_households_census\"]\n    )\n\nTo adjust the design sample weight for nonresponse, we can use a code similar to:\n\nimport samplics\nfrom samplics.weighting import SampleWeight\n\nstatus_mapping = {\n    \"in\": \"ineligible\", \n    \"rr\": \"respondent\", \n    \"nr\": \"non-respondent\", \n    \"uk\":\"unknown\"\n    }\n\nfull_sample[\"nr_weight\"] = SampleWeight().adjust(\n    samp_weight=full_sample[\"design_weight\"],\n    adjust_class=full_sample[\"region\"],\n    resp_status=full_sample[\"response_status\"],\n    resp_dict=status_mapping\n    )\n\n\nimport samplics\nfrom samplics.estimation import TaylorEstimator, ReplicateEstimator\n\nzinc_mean_str = TaylorEstimator(\"mean\").estimate(\n    y=nhanes2f[\"zinc\"],\n    samp_weight=nhanes2f[\"finalwgt\"],\n    stratum=nhanes2f[\"stratid\"],\n    psu=nhanes2f[\"psuid\"],\n    exclude_nan=True\n)\n\nratio_wgt_hgt = ReplicateEstimator(\"brr\", \"ratio\").estimate(\n    y=nhanes2brr[\"weight\"],\n    samp_weight=nhanes2brr[\"finalwgt\"],\n    x=nhanes2brr[\"height\"],\n    rep_weights=nhanes2brr.loc[:, \"brr_1\":\"brr_32\"],\n    exclude_nan = True\n)\n\n\n\nContributing\n\n\nSupport the project\n\n\nLicense\nOpen source MIT"
  },
  {
    "objectID": "pages/selection.html",
    "href": "pages/selection.html",
    "title": "Overviews",
    "section": "",
    "text": "In this tutorial, we generate simulated data to illustrate the first and second stage selections of clusters and households, respectively.\nSection 1: Selection of PSUs  Section 2: Selection of SSUs \nFor a comprehensive review of sampling techniques, users may want to consult Brewer and Hanif (1983), Cochran (1977), Kish (1965), and Lohr (2021).\n\n\n\n\nReferences\n\nBrewer, K. R. W., and M Hanif. 1983. Sampling With Unequal Probabilities. Springer-Verlag New York, Inc. https://doi.org/10.1007/9781468494075.\n\n\nCochran, William G. 1977. Sampling Techniques, 3rd edn. John Wiley & Sons, Inc.\n\n\nKish, Leslie. 1965. Survey Sampling. John Wiley & Sons, Inc.\n\n\nLohr, Sharon L. 2021. Sampling: Design and Analysis, Third Edition. Chapman; Hall/CRC. https://doi.org/https://doi.org/10.1201/9780429298899."
  },
  {
    "objectID": "pages/size.html",
    "href": "pages/size.html",
    "title": "Overview",
    "section": "",
    "text": "In this tutorial, we illustrate the calculation and allocation of some common sample size methods. Users can found additional details from Chow et al. (2018) and Ryan (2013).\nSection 1: Sample size calculation for stage sampling \n\n\n\n\nReferences\n\nChow, S., Shao J., Wang H., and Y. Lokhnygina. 2018. Sample Size Calculations in Clinical Research, Third Edition. Chapman; Hall/CRC. https://doi.org/10.1201/9781315183084.\n\n\nRyan, T P. 2013. Sample Size Determination and Power. John Wiley & Sons, Inc. https://doi.org/10.1002/9781118439241."
  },
  {
    "objectID": "pages/weight_replicates.html",
    "href": "pages/weight_replicates.html",
    "title": "Replicate Weights",
    "section": "",
    "text": "In this tutorial, we will explore creating replicate weights using the class ReplicateWeight. Three replication methods have been implemented: balanced repeated replication (BRR) including the Fay-BRR, bootstrap and jackknife. The replicate method of interest is specified when initializing the class by using the parameter method. The parameter method takes the values “bootstrap”, “brr”, or “jackknife”. In this tutorial, we show how the API works for producing replicate weights.\n\nimport pandas as pd\n\nfrom samplics.datasets import load_psu_sample, load_ssu_sample\nfrom samplics.weighting import ReplicateWeight\n\nWe import the sample data…\n\n# Load PSU sample data\npsu_sample_dict = load_psu_sample()\npsu_sample = psu_sample_dict[\"data\"]\n\n# Load PSU sample data\nssu_sample_dict = load_ssu_sample()\nssu_sample = ssu_sample_dict[\"data\"]\n\nfull_sample = pd.merge(\n    psu_sample[[\"cluster\", \"region\", \"psu_prob\"]], \n    ssu_sample[[\"cluster\", \"household\", \"ssu_prob\"]], \n    on=\"cluster\")\n\nfull_sample[\"inclusion_prob\"] = \\\n    full_sample[\"psu_prob\"] * full_sample[\"ssu_prob\"] \nfull_sample[\"design_weight\"] = 1 / full_sample[\"inclusion_prob\"] \n\nfull_sample.head(15)\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      psu_prob\n      household\n      ssu_prob\n      inclusion_prob\n      design_weight\n    \n  \n  \n    \n      0\n      7\n      North\n      0.187726\n      72\n      0.115385\n      0.021661\n      46.166667\n    \n    \n      1\n      7\n      North\n      0.187726\n      73\n      0.115385\n      0.021661\n      46.166667\n    \n    \n      2\n      7\n      North\n      0.187726\n      75\n      0.115385\n      0.021661\n      46.166667\n    \n    \n      3\n      7\n      North\n      0.187726\n      715\n      0.115385\n      0.021661\n      46.166667\n    \n    \n      4\n      7\n      North\n      0.187726\n      722\n      0.115385\n      0.021661\n      46.166667\n    \n    \n      5\n      7\n      North\n      0.187726\n      724\n      0.115385\n      0.021661\n      46.166667\n    \n    \n      6\n      7\n      North\n      0.187726\n      755\n      0.115385\n      0.021661\n      46.166667\n    \n    \n      7\n      7\n      North\n      0.187726\n      761\n      0.115385\n      0.021661\n      46.166667\n    \n    \n      8\n      7\n      North\n      0.187726\n      764\n      0.115385\n      0.021661\n      46.166667\n    \n    \n      9\n      7\n      North\n      0.187726\n      782\n      0.115385\n      0.021661\n      46.166667\n    \n    \n      10\n      7\n      North\n      0.187726\n      795\n      0.115385\n      0.021661\n      46.166667\n    \n    \n      11\n      7\n      North\n      0.187726\n      7111\n      0.115385\n      0.021661\n      46.166667\n    \n    \n      12\n      7\n      North\n      0.187726\n      7112\n      0.115385\n      0.021661\n      46.166667\n    \n    \n      13\n      7\n      North\n      0.187726\n      7117\n      0.115385\n      0.021661\n      46.166667\n    \n    \n      14\n      7\n      North\n      0.187726\n      7123\n      0.115385\n      0.021661\n      46.166667\n    \n  \n\n\n\n\n\nBalanced Repeated Replication (BRR)\nThe basic idea of BRR is to slip the sample in independent random groups. The groups are then threated as independent replicates of the the sample design. A special case is when the sample is split into two half samples in each stratum. This design is suitable to many survey designs where only two psus are selected by stratum. In practice, one of the psu is asigned to the first random group and the other psu is assign to the second group. The sample weights are double for one group (say the first one) and the sample weights in the other group are set to zero. To ensure that the replicates are independent, we use hadamard matrices to assign the random groups.\n\nimport scipy\nscipy.linalg.hadamard(8)\n\narray([[ 1,  1,  1,  1,  1,  1,  1,  1],\n       [ 1, -1,  1, -1,  1, -1,  1, -1],\n       [ 1,  1, -1, -1,  1,  1, -1, -1],\n       [ 1, -1, -1,  1,  1, -1, -1,  1],\n       [ 1,  1,  1,  1, -1, -1, -1, -1],\n       [ 1, -1,  1, -1, -1,  1, -1,  1],\n       [ 1,  1, -1, -1, -1, -1,  1,  1],\n       [ 1, -1, -1,  1, -1,  1,  1, -1]])\n\n\nIn our example, we have 10 psus. If we do not have explicit stratification then replicate() will group the clusters into 5 strata (2 per stratum). In this case, the smallest number of replicates possible using the hadamard matrix is 8.\nThe result below shows that replicate() created 5 strata by grouping clusters 7 and 10 in the first stratum, clusters 16 and 24 in the second stratum, and so on. We can achieve the same result by providing setting stratification=True and providing the stratum variable to replicate().\n\nbrr = ReplicateWeight(method=\"brr\", stratification=False)\nbrr_wgt = brr.replicate(\n    samp_weight=full_sample[\"design_weight\"], \n    psu=full_sample[\"cluster\"]\n    )\n\nbrr_wgt.drop_duplicates().head(10)\n\n\n\n\n\n  \n    \n      \n      _stratum\n      _psu\n      _samp_weight\n      _brr_wgt_1\n      _brr_wgt_2\n      _brr_wgt_3\n      _brr_wgt_4\n      _brr_wgt_5\n      _brr_wgt_6\n      _brr_wgt_7\n      _brr_wgt_8\n    \n  \n  \n    \n      0\n      1\n      7\n      46.166667\n      0.000000\n      92.333333\n      0.000000\n      92.333333\n      0.000000\n      92.333333\n      0.000000\n      92.333333\n    \n    \n      15\n      1\n      10\n      50.783333\n      101.566667\n      0.000000\n      101.566667\n      0.000000\n      101.566667\n      0.000000\n      101.566667\n      0.000000\n    \n    \n      30\n      2\n      16\n      62.149123\n      0.000000\n      0.000000\n      124.298246\n      124.298246\n      0.000000\n      0.000000\n      124.298246\n      124.298246\n    \n    \n      45\n      2\n      24\n      58.940741\n      117.881481\n      117.881481\n      0.000000\n      0.000000\n      117.881481\n      117.881481\n      0.000000\n      0.000000\n    \n    \n      60\n      3\n      29\n      65.702778\n      0.000000\n      131.405556\n      131.405556\n      0.000000\n      0.000000\n      131.405556\n      131.405556\n      0.000000\n    \n    \n      75\n      3\n      34\n      75.661566\n      151.323133\n      0.000000\n      0.000000\n      151.323133\n      151.323133\n      0.000000\n      0.000000\n      151.323133\n    \n    \n      90\n      4\n      45\n      85.398025\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      170.796049\n      170.796049\n      170.796049\n      170.796049\n    \n    \n      105\n      4\n      52\n      85.520635\n      171.041270\n      171.041270\n      171.041270\n      171.041270\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      120\n      5\n      64\n      218.893889\n      0.000000\n      437.787778\n      0.000000\n      437.787778\n      437.787778\n      0.000000\n      437.787778\n      0.000000\n    \n    \n      135\n      5\n      86\n      213.491667\n      426.983333\n      0.000000\n      426.983333\n      0.000000\n      0.000000\n      426.983333\n      0.000000\n      426.983333\n    \n  \n\n\n\n\nAn extension of BRR is the Fay’s method. In the Fay’s approach, instead of multiplying one half-sample by zero, we multiple the sampel weights by a factor \\(\\alpha\\) and the other halh-sample by \\(2-\\alpha\\). We refer to \\(\\alpha\\) as the fay coefficient. Note that when \\(\\alpha=0\\) then teh Fay’s method reduces to BRR.\n\nfay = ReplicateWeight(method=\"brr\", stratification=False, fay_coef=0.3)\nfay_wgt = fay.replicate(\n    samp_weight=full_sample[\"design_weight\"], \n    psu=full_sample[\"cluster\"], \n    rep_prefix=\"fay_weight_\",\n    psu_varname=\"cluster\", \n    str_varname=\"stratum\"\n)\n\nfay_wgt.drop_duplicates().head(10)\n\n\n\n\n\n  \n    \n      \n      stratum\n      cluster\n      _samp_weight\n      fay_weight_1\n      fay_weight_2\n      fay_weight_3\n      fay_weight_4\n      fay_weight_5\n      fay_weight_6\n      fay_weight_7\n      fay_weight_8\n    \n  \n  \n    \n      0\n      1\n      7\n      46.166667\n      13.850000\n      78.483333\n      13.850000\n      78.483333\n      13.850000\n      78.483333\n      13.850000\n      78.483333\n    \n    \n      15\n      1\n      10\n      50.783333\n      86.331667\n      15.235000\n      86.331667\n      15.235000\n      86.331667\n      15.235000\n      86.331667\n      15.235000\n    \n    \n      30\n      2\n      16\n      62.149123\n      18.644737\n      18.644737\n      105.653509\n      105.653509\n      18.644737\n      18.644737\n      105.653509\n      105.653509\n    \n    \n      45\n      2\n      24\n      58.940741\n      100.199259\n      100.199259\n      17.682222\n      17.682222\n      100.199259\n      100.199259\n      17.682222\n      17.682222\n    \n    \n      60\n      3\n      29\n      65.702778\n      19.710833\n      111.694722\n      111.694722\n      19.710833\n      19.710833\n      111.694722\n      111.694722\n      19.710833\n    \n    \n      75\n      3\n      34\n      75.661566\n      128.624663\n      22.698470\n      22.698470\n      128.624663\n      128.624663\n      22.698470\n      22.698470\n      128.624663\n    \n    \n      90\n      4\n      45\n      85.398025\n      25.619407\n      25.619407\n      25.619407\n      25.619407\n      145.176642\n      145.176642\n      145.176642\n      145.176642\n    \n    \n      105\n      4\n      52\n      85.520635\n      145.385079\n      145.385079\n      145.385079\n      145.385079\n      25.656190\n      25.656190\n      25.656190\n      25.656190\n    \n    \n      120\n      5\n      64\n      218.893889\n      65.668167\n      372.119611\n      65.668167\n      372.119611\n      372.119611\n      65.668167\n      372.119611\n      65.668167\n    \n    \n      135\n      5\n      86\n      213.491667\n      362.935833\n      64.047500\n      362.935833\n      64.047500\n      64.047500\n      362.935833\n      64.047500\n      362.935833\n    \n  \n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nFor any of the three methods, we can request the replicate coefficient instead of the replicate weights by using rep_coefs=True.\n\n\n\n#fay = ReplicateWeight(method=\"brr\", stratification=False, fay_coef=0.3)\nfay_wgt = fay.replicate(\n    samp_weight=full_sample[\"design_weight\"], \n    psu=full_sample[\"cluster\"], \n    rep_prefix=\"fay_weight_\",\n    psu_varname=\"cluster\", \n    str_varname=\"stratum\",\n    rep_coefs=True\n)\n\nfay_wgt.drop_duplicates().head(10)\n\n\n\n\n\n  \n    \n      \n      stratum\n      cluster\n      _samp_weight\n      fay_weight_1\n      fay_weight_2\n      fay_weight_3\n      fay_weight_4\n      fay_weight_5\n      fay_weight_6\n      fay_weight_7\n      fay_weight_8\n    \n  \n  \n    \n      0\n      1\n      7\n      46.166667\n      0.3\n      1.7\n      0.3\n      1.7\n      0.3\n      1.7\n      0.3\n      1.7\n    \n    \n      15\n      1\n      10\n      50.783333\n      1.7\n      0.3\n      1.7\n      0.3\n      1.7\n      0.3\n      1.7\n      0.3\n    \n    \n      30\n      2\n      16\n      62.149123\n      0.3\n      0.3\n      1.7\n      1.7\n      0.3\n      0.3\n      1.7\n      1.7\n    \n    \n      45\n      2\n      24\n      58.940741\n      1.7\n      1.7\n      0.3\n      0.3\n      1.7\n      1.7\n      0.3\n      0.3\n    \n    \n      60\n      3\n      29\n      65.702778\n      0.3\n      1.7\n      1.7\n      0.3\n      0.3\n      1.7\n      1.7\n      0.3\n    \n    \n      75\n      3\n      34\n      75.661566\n      1.7\n      0.3\n      0.3\n      1.7\n      1.7\n      0.3\n      0.3\n      1.7\n    \n    \n      90\n      4\n      45\n      85.398025\n      0.3\n      0.3\n      0.3\n      0.3\n      1.7\n      1.7\n      1.7\n      1.7\n    \n    \n      105\n      4\n      52\n      85.520635\n      1.7\n      1.7\n      1.7\n      1.7\n      0.3\n      0.3\n      0.3\n      0.3\n    \n    \n      120\n      5\n      64\n      218.893889\n      0.3\n      1.7\n      0.3\n      1.7\n      1.7\n      0.3\n      1.7\n      0.3\n    \n    \n      135\n      5\n      86\n      213.491667\n      1.7\n      0.3\n      1.7\n      0.3\n      0.3\n      1.7\n      0.3\n      1.7\n    \n  \n\n\n\n\n\n\nBootstrap\nFor the bootstrap replicates, we need to provide the number of replicates. When the number of replicates is not provided, ReplicateWeight will default to 500. The bootstrap consists of selecting the same number of psus as in the sample but with replacement. The selection is independently repeated for each replicate.\n\nbootstrap = ReplicateWeight(\n    method=\"bootstrap\", \n    stratification=False, \n    number_reps=50\n    )\nboot_wgt = bootstrap.replicate(\n    samp_weight=full_sample[\"design_weight\"], \n    psu=full_sample[\"cluster\"]\n    )\n\nboot_wgt.drop_duplicates().head(10)\n\n\n\n\n\n  \n    \n      \n      _psu\n      _samp_weight\n      _boot_wgt_1\n      _boot_wgt_2\n      _boot_wgt_3\n      _boot_wgt_4\n      _boot_wgt_5\n      _boot_wgt_6\n      _boot_wgt_7\n      _boot_wgt_8\n      ...\n      _boot_wgt_41\n      _boot_wgt_42\n      _boot_wgt_43\n      _boot_wgt_44\n      _boot_wgt_45\n      _boot_wgt_46\n      _boot_wgt_47\n      _boot_wgt_48\n      _boot_wgt_49\n      _boot_wgt_50\n    \n  \n  \n    \n      0\n      7\n      46.166667\n      0.000000\n      51.296296\n      51.296296\n      102.592593\n      0.000000\n      51.296296\n      0.000000\n      102.592593\n      ...\n      0.000000\n      51.296296\n      51.296296\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      102.592593\n      51.296296\n      102.592593\n    \n    \n      15\n      10\n      50.783333\n      0.000000\n      0.000000\n      56.425926\n      112.851852\n      169.277778\n      0.000000\n      56.425926\n      56.425926\n      ...\n      112.851852\n      169.277778\n      112.851852\n      0.000000\n      56.425926\n      56.425926\n      56.425926\n      0.000000\n      56.425926\n      0.000000\n    \n    \n      30\n      16\n      62.149123\n      0.000000\n      69.054581\n      69.054581\n      0.000000\n      0.000000\n      0.000000\n      69.054581\n      0.000000\n      ...\n      0.000000\n      0.000000\n      69.054581\n      69.054581\n      138.109162\n      207.163743\n      69.054581\n      0.000000\n      0.000000\n      138.109162\n    \n    \n      45\n      24\n      58.940741\n      130.979424\n      130.979424\n      0.000000\n      65.489712\n      0.000000\n      65.489712\n      196.469136\n      0.000000\n      ...\n      196.469136\n      65.489712\n      0.000000\n      65.489712\n      65.489712\n      0.000000\n      0.000000\n      0.000000\n      65.489712\n      0.000000\n    \n    \n      60\n      29\n      65.702778\n      73.003086\n      73.003086\n      73.003086\n      73.003086\n      73.003086\n      73.003086\n      0.000000\n      0.000000\n      ...\n      73.003086\n      73.003086\n      146.006173\n      0.000000\n      0.000000\n      146.006173\n      0.000000\n      73.003086\n      146.006173\n      73.003086\n    \n    \n      75\n      34\n      75.661566\n      0.000000\n      84.068407\n      84.068407\n      0.000000\n      168.136814\n      84.068407\n      168.136814\n      0.000000\n      ...\n      0.000000\n      84.068407\n      0.000000\n      84.068407\n      0.000000\n      0.000000\n      252.205222\n      252.205222\n      0.000000\n      84.068407\n    \n    \n      90\n      45\n      85.398025\n      94.886694\n      0.000000\n      94.886694\n      94.886694\n      94.886694\n      379.546776\n      0.000000\n      94.886694\n      ...\n      189.773388\n      0.000000\n      0.000000\n      94.886694\n      0.000000\n      284.660082\n      0.000000\n      94.886694\n      189.773388\n      94.886694\n    \n    \n      105\n      52\n      85.520635\n      190.045855\n      0.000000\n      95.022928\n      0.000000\n      95.022928\n      95.022928\n      190.045855\n      285.068783\n      ...\n      0.000000\n      190.045855\n      190.045855\n      190.045855\n      0.000000\n      0.000000\n      190.045855\n      95.022928\n      0.000000\n      95.022928\n    \n    \n      120\n      64\n      218.893889\n      0.000000\n      243.215432\n      243.215432\n      243.215432\n      0.000000\n      0.000000\n      0.000000\n      243.215432\n      ...\n      0.000000\n      0.000000\n      243.215432\n      729.646296\n      1216.077160\n      0.000000\n      486.430864\n      243.215432\n      486.430864\n      243.215432\n    \n    \n      135\n      86\n      213.491667\n      711.638889\n      474.425926\n      237.212963\n      237.212963\n      237.212963\n      0.000000\n      0.000000\n      237.212963\n      ...\n      237.212963\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n    \n  \n\n10 rows × 52 columns\n\n\n\n\n\nJackknife\nBelow, we illustrate the API for creating replicate weights using the jackknife method.\n\njackknife = ReplicateWeight(\n    method=\"jackknife\", \n    stratification=False\n    )\njkn_wgt = jackknife.replicate(\n    samp_weight=full_sample[\"design_weight\"], \n    psu=full_sample[\"cluster\"]\n    )\n\njkn_wgt.drop_duplicates().head(10)\n\n\n\n\n\n  \n    \n      \n      _psu\n      _samp_weight\n      _jk_wgt_1\n      _jk_wgt_2\n      _jk_wgt_3\n      _jk_wgt_4\n      _jk_wgt_5\n      _jk_wgt_6\n      _jk_wgt_7\n      _jk_wgt_8\n      _jk_wgt_9\n      _jk_wgt_10\n    \n  \n  \n    \n      0\n      7\n      46.166667\n      0.000000\n      51.296296\n      51.296296\n      51.296296\n      51.296296\n      51.296296\n      51.296296\n      51.296296\n      51.296296\n      51.296296\n    \n    \n      15\n      10\n      50.783333\n      56.425926\n      0.000000\n      56.425926\n      56.425926\n      56.425926\n      56.425926\n      56.425926\n      56.425926\n      56.425926\n      56.425926\n    \n    \n      30\n      16\n      62.149123\n      69.054581\n      69.054581\n      0.000000\n      69.054581\n      69.054581\n      69.054581\n      69.054581\n      69.054581\n      69.054581\n      69.054581\n    \n    \n      45\n      24\n      58.940741\n      65.489712\n      65.489712\n      65.489712\n      0.000000\n      65.489712\n      65.489712\n      65.489712\n      65.489712\n      65.489712\n      65.489712\n    \n    \n      60\n      29\n      65.702778\n      73.003086\n      73.003086\n      73.003086\n      73.003086\n      0.000000\n      73.003086\n      73.003086\n      73.003086\n      73.003086\n      73.003086\n    \n    \n      75\n      34\n      75.661566\n      84.068407\n      84.068407\n      84.068407\n      84.068407\n      84.068407\n      0.000000\n      84.068407\n      84.068407\n      84.068407\n      84.068407\n    \n    \n      90\n      45\n      85.398025\n      94.886694\n      94.886694\n      94.886694\n      94.886694\n      94.886694\n      94.886694\n      0.000000\n      94.886694\n      94.886694\n      94.886694\n    \n    \n      105\n      52\n      85.520635\n      95.022928\n      95.022928\n      95.022928\n      95.022928\n      95.022928\n      95.022928\n      95.022928\n      0.000000\n      95.022928\n      95.022928\n    \n    \n      120\n      64\n      218.893889\n      243.215432\n      243.215432\n      243.215432\n      243.215432\n      243.215432\n      243.215432\n      243.215432\n      243.215432\n      0.000000\n      243.215432\n    \n    \n      135\n      86\n      213.491667\n      237.212963\n      237.212963\n      237.212963\n      237.212963\n      237.212963\n      237.212963\n      237.212963\n      237.212963\n      237.212963\n      0.000000\n    \n  \n\n\n\n\nWith stratification…\n\njackknife = ReplicateWeight(method=\"jackknife\", stratification=True)\njkn_wgt = jackknife.replicate(\n    samp_weight=full_sample[\"design_weight\"], \n    psu=full_sample[\"cluster\"], \n    stratum=full_sample[\"region\"]\n    )\n\njkn_wgt.drop_duplicates().head(10)\n\n\n\n\n\n  \n    \n      \n      _stratum\n      _psu\n      _samp_weight\n      _jk_wgt_1\n      _jk_wgt_2\n      _jk_wgt_3\n      _jk_wgt_4\n      _jk_wgt_5\n      _jk_wgt_6\n      _jk_wgt_7\n      _jk_wgt_8\n      _jk_wgt_9\n      _jk_wgt_10\n    \n  \n  \n    \n      0\n      East\n      52\n      85.520635\n      0.000000\n      69.250000\n      69.250000\n      46.166667\n      46.166667\n      46.166667\n      46.166667\n      46.166667\n      46.166667\n      46.166667\n    \n    \n      1\n      East\n      45\n      85.398025\n      69.250000\n      0.000000\n      69.250000\n      46.166667\n      46.166667\n      46.166667\n      46.166667\n      46.166667\n      46.166667\n      46.166667\n    \n    \n      15\n      East\n      52\n      85.520635\n      0.000000\n      76.175000\n      76.175000\n      50.783333\n      50.783333\n      50.783333\n      50.783333\n      50.783333\n      50.783333\n      50.783333\n    \n    \n      16\n      East\n      45\n      85.398025\n      76.175000\n      0.000000\n      76.175000\n      50.783333\n      50.783333\n      50.783333\n      50.783333\n      50.783333\n      50.783333\n      50.783333\n    \n    \n      20\n      East\n      34\n      75.661566\n      76.175000\n      76.175000\n      0.000000\n      50.783333\n      50.783333\n      50.783333\n      50.783333\n      50.783333\n      50.783333\n      50.783333\n    \n    \n      30\n      East\n      34\n      75.661566\n      93.223684\n      93.223684\n      0.000000\n      62.149123\n      62.149123\n      62.149123\n      62.149123\n      62.149123\n      62.149123\n      62.149123\n    \n    \n      33\n      East\n      45\n      85.398025\n      93.223684\n      0.000000\n      93.223684\n      62.149123\n      62.149123\n      62.149123\n      62.149123\n      62.149123\n      62.149123\n      62.149123\n    \n    \n      38\n      East\n      52\n      85.520635\n      0.000000\n      93.223684\n      93.223684\n      62.149123\n      62.149123\n      62.149123\n      62.149123\n      62.149123\n      62.149123\n      62.149123\n    \n    \n      45\n      North\n      7\n      46.166667\n      58.940741\n      58.940741\n      58.940741\n      0.000000\n      117.881481\n      58.940741\n      58.940741\n      58.940741\n      58.940741\n      58.940741\n    \n    \n      59\n      North\n      10\n      50.783333\n      58.940741\n      58.940741\n      58.940741\n      117.881481\n      0.000000\n      58.940741\n      58.940741\n      58.940741\n      58.940741\n      58.940741\n    \n  \n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nFor any of the three methods, we can request the replicate coefficient instead of the replicate weights by using rep_coefs=True.\n\n\n\n#jackknife = ReplicateWeight(method=\"jackknife\", stratification=True)\njkn_wgt = jackknife.replicate(\n    samp_weight=full_sample[\"design_weight\"], \n    psu=full_sample[\"cluster\"], \n    stratum=full_sample[\"region\"], \n    rep_coefs=True\n)\n\njkn_wgt.drop_duplicates().sort_values(by=\"_stratum\").head(15)\n\n\n\n\n\n  \n    \n      \n      _stratum\n      _psu\n      _samp_weight\n      _jk_wgt_1\n      _jk_wgt_2\n      _jk_wgt_3\n      _jk_wgt_4\n      _jk_wgt_5\n      _jk_wgt_6\n      _jk_wgt_7\n      _jk_wgt_8\n      _jk_wgt_9\n      _jk_wgt_10\n    \n  \n  \n    \n      0\n      East\n      52\n      85.520635\n      0.0\n      1.5\n      1.5\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n    \n    \n      1\n      East\n      45\n      85.398025\n      1.5\n      0.0\n      1.5\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n    \n    \n      20\n      East\n      34\n      75.661566\n      1.5\n      1.5\n      0.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n    \n    \n      45\n      North\n      7\n      46.166667\n      1.0\n      1.0\n      1.0\n      0.0\n      2.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n    \n    \n      59\n      North\n      10\n      50.783333\n      1.0\n      1.0\n      1.0\n      2.0\n      0.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n    \n    \n      75\n      South\n      29\n      65.702778\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      0.0\n      1.5\n      1.5\n      1.0\n      1.0\n    \n    \n      77\n      South\n      24\n      58.940741\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.5\n      0.0\n      1.5\n      1.0\n      1.0\n    \n    \n      82\n      South\n      16\n      62.149123\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.5\n      1.5\n      0.0\n      1.0\n      1.0\n    \n    \n      120\n      West\n      86\n      213.491667\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      0.0\n      2.0\n    \n    \n      133\n      West\n      64\n      218.893889\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      1.0\n      2.0\n      0.0"
  },
  {
    "objectID": "pages/estimation_taylor.html",
    "href": "pages/estimation_taylor.html",
    "title": "Taylor-based Estimation",
    "section": "",
    "text": "from samplics.datasets import load_nhanes2\nfrom samplics.estimation import TaylorEstimator\n\n\n# Load Nhanes sample data\nnhanes2_dict = load_nhanes2()\nnhanes2 = nhanes2_dict[\"data\"]\n\nnhanes2.head(15)\n\n\n\n\n\n  \n    \n      \n      stratid\n      psuid\n      race\n      highbp\n      highlead\n      zinc\n      diabetes\n      finalwgt\n    \n  \n  \n    \n      0\n      1\n      1\n      1\n      0\n      NaN\n      104.0\n      0.0\n      8995\n    \n    \n      1\n      1\n      1\n      1\n      0\n      0.0\n      111.0\n      0.0\n      25964\n    \n    \n      2\n      1\n      1\n      3\n      0\n      NaN\n      102.0\n      0.0\n      8752\n    \n    \n      3\n      1\n      1\n      1\n      1\n      NaN\n      109.0\n      1.0\n      4310\n    \n    \n      4\n      1\n      1\n      1\n      0\n      0.0\n      99.0\n      0.0\n      9011\n    \n    \n      5\n      1\n      1\n      1\n      1\n      NaN\n      101.0\n      0.0\n      4310\n    \n    \n      6\n      1\n      1\n      1\n      0\n      0.0\n      93.0\n      0.0\n      3201\n    \n    \n      7\n      1\n      1\n      1\n      1\n      NaN\n      83.0\n      0.0\n      25386\n    \n    \n      8\n      1\n      1\n      1\n      0\n      NaN\n      98.0\n      0.0\n      12102\n    \n    \n      9\n      1\n      1\n      2\n      0\n      0.0\n      98.0\n      0.0\n      4312\n    \n    \n      10\n      1\n      1\n      1\n      1\n      NaN\n      92.0\n      0.0\n      4031\n    \n    \n      11\n      1\n      1\n      2\n      0\n      0.0\n      90.0\n      0.0\n      3628\n    \n    \n      12\n      1\n      1\n      1\n      0\n      NaN\n      101.0\n      0.0\n      28590\n    \n    \n      13\n      1\n      1\n      1\n      0\n      0.0\n      NaN\n      0.0\n      22754\n    \n    \n      14\n      1\n      1\n      2\n      0\n      1.0\n      123.0\n      0.0\n      7119\n    \n  \n\n\n\n\nUsing samplics, we can estimate the average level of zinc in the blood using the following\n\nzinc_mean_str = TaylorEstimator(\"mean\")\nzinc_mean_str.estimate(\n    y=nhanes2[\"zinc\"],\n    samp_weight=nhanes2[\"finalwgt\"],\n    stratum=nhanes2[\"stratid\"],\n    psu=nhanes2[\"psuid\"],\n    remove_nan=True,\n)\n\nprint(zinc_mean_str)\n\nSAMPLICS - Estimation of Mean\n\nNumber of strata: 31\nNumber of psus: 62\nDegree of freedom: 31\n\n     MEAN       SE       LCI       UCI       CV\n87.182067 0.494483 86.173563 88.190571 0.005672\n\n\nThe results of the estimation are stored in the dictionary zinc_mean_str. The users can covert the main estimation information into a pd.DataFrame by using the method to_dataframe().\n\nzinc_mean_str.to_dataframe()\n\n\n\n\n\n  \n    \n      \n      _parameter\n      _estimate\n      _stderror\n      _lci\n      _uci\n      _cv\n    \n  \n  \n    \n      0\n      mean\n      87.182067\n      0.494483\n      86.173563\n      88.190571\n      0.005672\n    \n  \n\n\n\n\nThe method to_dataframe() is more useful for domain estimation by producing a table where which row is a level of the domain of interest, as shown below.\n\nzinc_mean_by_race = TaylorEstimator(\"mean\")\nzinc_mean_by_race.estimate(\n    y=nhanes2[\"zinc\"],\n    samp_weight=nhanes2[\"finalwgt\"],\n    stratum=nhanes2[\"stratid\"],\n    domain=nhanes2[\"race\"],\n    psu=nhanes2[\"psuid\"],\n    remove_nan=True,\n)\n\nzinc_mean_by_race.to_dataframe()\n\n\n\n\n\n  \n    \n      \n      _parameter\n      _domain\n      _estimate\n      _stderror\n      _lci\n      _uci\n      _cv\n    \n  \n  \n    \n      0\n      mean\n      1\n      87.495389\n      0.479196\n      86.518062\n      88.472716\n      0.005477\n    \n    \n      1\n      mean\n      2\n      85.085744\n      1.165209\n      82.709286\n      87.462203\n      0.013695\n    \n    \n      2\n      mean\n      3\n      83.570910\n      1.585463\n      80.337338\n      86.804483\n      0.018971\n    \n  \n\n\n\n\nLet’s remove the stratum parameter then we get\n\nzinc_mean_nostr = TaylorEstimator(\"mean\")\nzinc_mean_nostr.estimate(\n    y=nhanes2[\"zinc\"], \n    samp_weight=nhanes2[\"finalwgt\"], \n    psu=nhanes2[\"psuid\"], \n    remove_nan=True\n)\n\nprint(zinc_mean_nostr)\n\nSAMPLICS - Estimation of Mean\n\nNumber of strata: 1\nNumber of psus: 2\nDegree of freedom: 1\n\n     MEAN       SE       LCI       UCI       CV\n87.182067 0.742622 77.746158 96.617976 0.008518"
  },
  {
    "objectID": "pages/categorical_tabulation.html",
    "href": "pages/categorical_tabulation.html",
    "title": "Tabulation",
    "section": "",
    "text": "from pprint import pprint\n\nfrom samplics.datasets import load_birth, load_nhanes2\nfrom samplics.categorical import Tabulation, CrossTabulation\n\n\nOne-way tabulation\nThe birth dataset has four variables: region, agecat, birthcat, and pop. The variables agecat and birthcat are categirical. By default, pandas read them as numerical, because they are coded with numerical values. We use dtype=\"string\" or dtype=\"category\" to ensure that pandas codes the variables as categorical responses.\n\n# Load Birth sample data\nbirth_dict = load_birth()\nbirth = birth_dict[\"data\"].astype(\n    {\"region\": str, \"agecat\": str, \"birthcat\": str}\n)\n\nregion = birth[\"region\"]\nagecat = birth[\"agecat\"]\nbirthcat = birth[\"birthcat\"]\n\nbirth.head(15)\n\n\n\n\n\n  \n    \n      \n      region\n      agecat\n      birthcat\n      pop\n    \n  \n  \n    \n      0\n      1\n      1\n      1.0\n      28152\n    \n    \n      1\n      1\n      1\n      1.0\n      103101\n    \n    \n      2\n      1\n      1\n      1.0\n      113299\n    \n    \n      3\n      1\n      1\n      1.0\n      112028\n    \n    \n      4\n      1\n      1\n      1.0\n      99588\n    \n    \n      5\n      1\n      1\n      1.0\n      22356\n    \n    \n      6\n      1\n      1\n      1.0\n      102926\n    \n    \n      7\n      1\n      1\n      1.0\n      12627\n    \n    \n      8\n      1\n      1\n      1.0\n      112885\n    \n    \n      9\n      1\n      1\n      1.0\n      150297\n    \n    \n      10\n      1\n      1\n      1.0\n      52785\n    \n    \n      11\n      1\n      1\n      2.0\n      109108\n    \n    \n      12\n      1\n      1\n      2.0\n      87768\n    \n    \n      13\n      1\n      1\n      2.0\n      175886\n    \n    \n      14\n      1\n      1\n      2.0\n      107847\n    \n  \n\n\n\n\nWhen requesting a table, the user can set parameter=\"count\" which results in a tabulation with counts in the cells while parameter=\"proportion leads to cells with proportions. The expression Tabulation(\"count\") instantiates the class Tabulation() which has a method tabulate() to produce the table.\n\nbirth_count = Tabulation(parameter=\"count\")\nbirth_count.tabulate(birthcat, remove_nan=True)\n\nprint(birth_count)\n\n\nTabulation of birthcat\n Number of strata: 1\n Number of PSUs: 956\n Number of observations: 956\n Degrees of freedom: 955.00\n\n variable category  count  stderror   lower_ci   upper_ci\nbirthcat      1.0  240.0 13.414066 213.675550 266.324450\nbirthcat      2.0  450.0 15.441157 419.697485 480.302515\nbirthcat      3.0  233.0 13.281448 206.935807 259.064193\nbirthcat      nan   33.0  5.647499  21.917060  44.082940\n\n\n\nWhen remove_nan=False, the numpy and pandas special values NaNs, respectively np.nan and NaN, are treated as valid categories and added to the tables as shown below\n\nbirth_count = Tabulation(parameter=\"count\")\nbirth_count.tabulate(birthcat, remove_nan=False)\n\nprint(birth_count)\n\n\nTabulation of birthcat\n Number of strata: 1\n Number of PSUs: 956\n Number of observations: 956\n Degrees of freedom: 955.00\n\n variable category  count  stderror   lower_ci   upper_ci\nbirthcat      1.0  240.0 13.414066 213.675550 266.324450\nbirthcat      2.0  450.0 15.441157 419.697485 480.302515\nbirthcat      3.0  233.0 13.281448 206.935807 259.064193\nbirthcat      nan   33.0  5.647499  21.917060  44.082940\n\n\n\nThe data associated with the tabulation are stored in nested python dictionaries. The higher level key is the variable name and the inner keys are the response categories. Each of the last four columns shown above are stored in separated dictionaries. Two of those dictionaries for the counts and standard errors shown below.\n\nprint(\"\\nThe designed-based estimated counts are:\")\npprint(birth_count.point_est)\n\nprint(\"\\nThe designed-based standard errors are:\")\npprint(birth_count.stderror)\n\n\nThe designed-based estimated counts are:\n{'birthcat': {'1.0': 240.0, '2.0': 450.0, '3.0': 233.0, 'nan': 33.0}}\n\nThe designed-based standard errors are:\n{'birthcat': {'1.0': 13.414066228212418,\n              '2.0': 15.441156672080245,\n              '3.0': 13.281447911984001,\n              'nan': 5.647498635475369}}\n\n\nSometimes, the user may want to run multiple one-way tables of several variables. In this case, the user can provide the data as a two-dimensional dataframe where each column represents one categorical variable. In this situation, each categorical variable is tabulated individually then combined into Python dictionaries.\n\nbirth_count2 = Tabulation(parameter=\"count\")\nbirth_count2.tabulate(\n    birth[[\"region\", \"agecat\", \"birthcat\"]], \n    remove_nan=True\n    )\n\nprint(birth_count2)\n\n\nTabulation of region\n Number of strata: 1\n Number of PSUs: 956\n Number of observations: 956\n Degrees of freedom: 955.00\n\n variable category  count  stderror   lower_ci   upper_ci\n  region        1  166.0 11.718335 143.003340 188.996660\n  region        2  284.0 14.136507 256.257795 311.742205\n  region        3  250.0 13.594733 223.321002 276.678998\n  region        4  256.0 13.698320 229.117716 282.882284\n  agecat        1  507.0 15.439224 476.701278 537.298722\n  agecat        2  316.0 14.552307 287.441809 344.558191\n  agecat        3  133.0 10.705921 111.990152 154.009848\nbirthcat      1.0  240.0 13.414066 213.675550 266.324450\nbirthcat      2.0  450.0 15.441157 419.697485 480.302515\nbirthcat      3.0  233.0 13.281448 206.935807 259.064193\nbirthcat      nan   33.0  5.647499  21.917060  44.082940\n\n\n\nTwo of the associated Python dictionaries are shown below. The structure of the inner dictionaries remain the same but additional key-value pairs are added to represent the several categorical variables.\n\nprint(\"\\nThe designed-based estimated counts are:\")\npprint(birth_count2.point_est)\n\nprint(\"\\nThe designed-based standard errors are:\")\npprint(birth_count2.stderror)\n\n\nThe designed-based estimated counts are:\n{'agecat': {'1': 507.0, '2': 316.0, '3': 133.0},\n 'birthcat': {'1.0': 240.0, '2.0': 450.0, '3.0': 233.0, 'nan': 33.0},\n 'region': {'1': 166.0, '2': 284.0, '3': 250.0, '4': 256.0}}\n\nThe designed-based standard errors are:\n{'agecat': {'1': 15.439223863518952,\n            '2': 14.55230681053191,\n            '3': 10.705921442206721},\n 'birthcat': {'1.0': 13.414066228212418,\n              '2.0': 15.441156672080245,\n              '3.0': 13.281447911984001,\n              'nan': 5.647498635475369},\n 'region': {'1': 11.718334853030537,\n            '2': 14.13650726651876,\n            '3': 13.594732580183488,\n            '4': 13.698320300591277}}\n\n\nIn the example above, we used pandas series and dataframes with labelled variables. In some situations, the user may want to tabulate numpy arrays, lists or tuples without variable names atrribute from the data. For these situations, the varnames parameter provides a way to assign names for the categorical variables. Even when the variables have labels, users can leverage varnames to rename the categorical variables.\n\nregion_no_name = birth[\"region\"].to_numpy()\nagecat_no_name = birth[\"agecat\"].to_numpy()\nbirthcat_no_name = birth[\"birthcat\"].to_numpy()\n\nbirth_prop_new_name = Tabulation(parameter=\"proportion\")\nbirth_prop_new_name.tabulate(\n    vars=[region_no_name, agecat_no_name, birthcat_no_name],\n    varnames=[\"Region\", \"AgeGroup\", \"BirthType\"],\n    remove_nan=True,\n)\n\nprint(birth_prop_new_name)\n\n\nTabulation of Region\n Number of strata: 1\n Number of PSUs: 956\n Number of observations: 956\n Degrees of freedom: 955.00\n\n  variable category  proportion  stderror  lower_ci  upper_ci\n   Region        1    0.173640  0.012258  0.150883  0.199025\n   Region        2    0.297071  0.014787  0.268892  0.326883\n   Region        3    0.261506  0.014220  0.234574  0.290357\n   Region        4    0.267782  0.014329  0.240614  0.296819\n AgeGroup        1    0.530335  0.016150  0.498562  0.561864\n AgeGroup        2    0.330544  0.015222  0.301383  0.361068\n AgeGroup        3    0.139121  0.011199  0.118564  0.162586\nBirthType      1.0    0.251046  0.014031  0.224524  0.279571\nBirthType      2.0    0.470711  0.016152  0.439174  0.502484\nBirthType      3.0    0.243724  0.013893  0.217502  0.272008\nBirthType      nan    0.034519  0.005907  0.024627  0.048188\n\n\n\nIf the user does not specify varnames, the tabulate() creates generic variables names var_1, var_2, etc.\n\nbirth_prop_new_name2 = Tabulation(parameter=\"proportion\")\nbirth_prop_new_name2.tabulate(\n    vars=[region_no_name, agecat_no_name, birthcat_no_name], \n    remove_nan=True\n)\n\nprint(birth_prop_new_name2)\n\n\nTabulation of var_1\n Number of strata: 1\n Number of PSUs: 956\n Number of observations: 956\n Degrees of freedom: 955.00\n\n variable category  proportion  stderror  lower_ci  upper_ci\n   var_1        1    0.173640  0.012258  0.150883  0.199025\n   var_1        2    0.297071  0.014787  0.268892  0.326883\n   var_1        3    0.261506  0.014220  0.234574  0.290357\n   var_1        4    0.267782  0.014329  0.240614  0.296819\n   var_2        1    0.530335  0.016150  0.498562  0.561864\n   var_2        2    0.330544  0.015222  0.301383  0.361068\n   var_2        3    0.139121  0.011199  0.118564  0.162586\n   var_3      1.0    0.251046  0.014031  0.224524  0.279571\n   var_3      2.0    0.470711  0.016152  0.439174  0.502484\n   var_3      3.0    0.243724  0.013893  0.217502  0.272008\n   var_3      nan    0.034519  0.005907  0.024627  0.048188\n\n\n\nIf the data was collected from a complex survey sample, the user may provide the sample design information to derive design-based statistics for the tabulation.\n\n# Load Nhanes sample data\nnhanes2_dict = load_nhanes2()\nnhanes2 = nhanes2_dict[\"data\"]\n\nstratum = nhanes2[\"stratid\"]\npsu = nhanes2[\"psuid\"]\nweight = nhanes2[\"finalwgt\"]\n\ndiabetes_nhanes = Tabulation(\"proportion\")\ndiabetes_nhanes.tabulate(\n    vars=nhanes2[[\"race\", \"diabetes\"]],\n    samp_weight=weight,\n    stratum=stratum,\n    psu=psu,\n    remove_nan=True,\n)\n\nprint(diabetes_nhanes)\n\n\nTabulation of race\n Number of strata: 31\n Number of PSUs: 62\n Number of observations: 10335\n Degrees of freedom: 31.00\n\n variable category  proportion  stderror  lower_ci  upper_ci\n    race      1.0    0.879016  0.016722  0.840568  0.909194\n    race      2.0    0.095615  0.012778  0.072541  0.125039\n    race      3.0    0.025369  0.010554  0.010781  0.058528\ndiabetes      0.0    0.965715  0.001820  0.961803  0.969238\ndiabetes      1.0    0.034285  0.001820  0.030762  0.038197\n\n\n\n\n\nTwo-way tabulation (cross-tabulation)\nCross-tabulation of two categorical variables is achieved by using the class CrossTabulation(). As above, cross-tabulation is possible for counts and proportions using CrossTabulation(parameter=\"count\") and CrossTabulation(parameter=\"proportion\"), respectively. The Python script below creates a design-based cross-tabulation of race by diabetes status. The sample design information is optional; when not provided, a simple random sample (srs) is assumed.\n\ncrosstab_nhanes = CrossTabulation(\"proportion\")\ncrosstab_nhanes.tabulate(\n    vars=nhanes2[[\"race\", \"diabetes\"]],\n    samp_weight=weight,\n    stratum=stratum,\n    psu=psu,\n    remove_nan=True,\n)\n\nprint(crosstab_nhanes)\n\n\nCross-tabulation of race and diabetes\n Number of strata: 31\n Number of PSUs: 62\n Number of observations: 10335\n Degrees of freedom: 31.00\n\n race diabetes  proportion  stderror  lower_ci  upper_ci\n   1      0.0    0.850866  0.015850  0.815577  0.880392\n   1      1.0    0.028123  0.001938  0.024430  0.032357\n   2      0.0    0.089991  0.012171  0.068062  0.118090\n   2      1.0    0.005646  0.000847  0.004157  0.007663\n   3      0.0    0.024858  0.010188  0.010702  0.056669\n   3      1.0    0.000516  0.000387  0.000112  0.002383\n\nPearson (with Rao-Scott adjustment):\n    Unadjusted - chi2(2): 21.2661 with p-value of 0.0000\n    Adjusted - F(1.52, 47.26): 14.9435  with p-value of 0.0000\n\n  Likelihood ratio (with Rao-Scott adjustment):\n     Unadjusted - chi2(2): 18.3925 with p-value of 0.0001\n     Adjusted - F(1.52, 47.26): 12.9242  with p-value of 0.0001\n\n\n\nIn addition to pandas dataframe, the categorical variables may be provided as an numpy array, list or tuple. In the examples below, the categorical variables are provided as a tuple vars=(rage, diabetes). In this case, race and diabetes are numpy arrays and do not have a name attribute. The parameter varnames allows the user to name the categorical variables. If varnames is not specified then `var_1 and var_2 are used as variables names.\n\nrace = nhanes2[\"race\"].to_numpy()\ndiabetes = nhanes2[\"diabetes\"].to_numpy()\n\ncrosstab_nhanes = CrossTabulation(\"proportion\")\ncrosstab_nhanes.tabulate(\n    vars=(race, diabetes),\n    samp_weight=weight,\n    stratum=stratum,\n    psu=psu,\n    remove_nan=True,\n)\n\nprint(crosstab_nhanes)\n\n\nCross-tabulation of var_1 and var_2\n Number of strata: 31\n Number of PSUs: 62\n Number of observations: 10335\n Degrees of freedom: 31.00\n\n var_1 var_2  proportion  stderror  lower_ci  upper_ci\n  1.0   0.0    0.850866  0.015850  0.815577  0.880392\n  1.0   1.0    0.028123  0.001938  0.024430  0.032357\n  2.0   0.0    0.089991  0.012171  0.068062  0.118090\n  2.0   1.0    0.005646  0.000847  0.004157  0.007663\n  3.0   0.0    0.024858  0.010188  0.010702  0.056669\n  3.0   1.0    0.000516  0.000387  0.000112  0.002383\n\nPearson (with Rao-Scott adjustment):\n    Unadjusted - chi2(2): 21.2661 with p-value of 0.0000\n    Adjusted - F(1.52, 47.26): 14.9435  with p-value of 0.0000\n\n  Likelihood ratio (with Rao-Scott adjustment):\n     Unadjusted - chi2(2): 18.3925 with p-value of 0.0001\n     Adjusted - F(1.52, 47.26): 12.9242  with p-value of 0.0001\n\n\n\nSame as the above example with variables names specified by varnames=[\"Race\", DiabetesStatus\"]\n\ncrosstab_nhanes = CrossTabulation(\"proportion\")\ncrosstab_nhanes.tabulate(\n    vars=(race, diabetes),\n    varnames=[\"Race\", \"DiabetesStatus\"],\n    samp_weight=weight,\n    stratum=stratum,\n    psu=psu,\n    remove_nan=True,\n)\n\nprint(crosstab_nhanes)\n\n\nCross-tabulation of Race and DiabetesStatus\n Number of strata: 31\n Number of PSUs: 62\n Number of observations: 10335\n Degrees of freedom: 31.00\n\n Race DiabetesStatus  proportion  stderror  lower_ci  upper_ci\n 1.0            0.0    0.850866  0.015850  0.815577  0.880392\n 1.0            1.0    0.028123  0.001938  0.024430  0.032357\n 2.0            0.0    0.089991  0.012171  0.068062  0.118090\n 2.0            1.0    0.005646  0.000847  0.004157  0.007663\n 3.0            0.0    0.024858  0.010188  0.010702  0.056669\n 3.0            1.0    0.000516  0.000387  0.000112  0.002383\n\nPearson (with Rao-Scott adjustment):\n    Unadjusted - chi2(2): 21.2661 with p-value of 0.0000\n    Adjusted - F(1.52, 47.26): 14.9435  with p-value of 0.0000\n\n  Likelihood ratio (with Rao-Scott adjustment):\n     Unadjusted - chi2(2): 18.3925 with p-value of 0.0001\n     Adjusted - F(1.52, 47.26): 12.9242  with p-value of 0.0001"
  },
  {
    "objectID": "pages/weight_adj.html",
    "href": "pages/weight_adj.html",
    "title": "Sample Weight Adjustments",
    "section": "",
    "text": "The objective of this tutorial is to familiarize ourselves with SampleWeight the samplics class for adjusting sample weights. In practice, it is necessary to adjust base or design sample weights obtained directly from the random sample mechanism. These adjustments are done to correct for nonresponse, reduce effects of extreme/large weights, better align with known auxiliary information, and more. Specifically in this tutorial, we will:\nTo run the code in this notebook, we will use the dataset that was developed in the previous tutorial on sample selection."
  },
  {
    "objectID": "pages/weight_adj.html#nonresponse-adjustment",
    "href": "pages/weight_adj.html#nonresponse-adjustment",
    "title": "Sample Weight Adjustments",
    "section": "Nonresponse adjustment",
    "text": "Nonresponse adjustment\nIn general, the sample weights are adjusted to redistribute the sample weights of all eligible units for which there is no sufficient response (unit level nonresponse) to the sampling units that sufficiently responded to the survey. This adjustment is done within adjustment classes or domains. Note that the determination of the response categories (unit response, item response, ineligible, etc.) is outside of the scope of this tutorial.\nAlso, the weights of the sampling units with unknown eligibility are redistributed to the rest of the sampling units. In general, ineligible sampling units receive weights from the sampling units with unknown eligibility since eligible sampling units can be part of the unknown pool.\nThe method adjust() has a boolean parameter unknown_to_inelig which controls how the sample weights of the unknown is redistributed. By default, adjust() redistribute the sample weights of the sampling units of the unknown to the ineligibles (unknown_to_inelig=True). If we do not wish to redistribute the sample weights of the unknowns to the ineligibles then we just set the flag to False (unknown_to_inelig=Fasle).\nIn the snippet of code below, we adjust the weight within clusters that is we use clusters as our adjustment classes. Note that we run the nonresponse adjustment twice, the first time with unknown_to_inelig=True (nr_weight) and the second time with the flag equal to False (nr_weight2). With unknown_to_inelig=True, the ineligible received part of the sample weights from the unknowns. Hence, the sample weights for the respondent is less than when the flag is False. With unknown_to_inelig=Fasle, the ineligible did Not receive any weights from the unknowns. Hence, the sample weights for the ineligible units remain the same before and after adjustment. In a real survey, the statistician may decide on the best non-response strategy based on the available information.\n\nstatus_mapping = {\n    \"in\": \"ineligible\", \n    \"rr\": \"respondent\", \n    \"nr\": \"non-respondent\", \n    \"uk\": \"unknown\"\n    }\n\nfull_sample[\"nr_weight\"] = SampleWeight().adjust(\n    samp_weight=full_sample[\"design_weight\"],\n    adjust_class=full_sample[[\"region\", \"cluster\"]],\n    resp_status=full_sample[\"response_status\"],\n    resp_dict=status_mapping,\n)\n\nfull_sample[\"nr_weight2\"] = SampleWeight().adjust(\n    samp_weight=full_sample[\"design_weight\"],\n    adjust_class=full_sample[[\"region\", \"cluster\"]],\n    resp_status=full_sample[\"response_status\"],\n    resp_dict=status_mapping,\n    unknown_to_inelig=False,\n)\n\nfull_sample[[\n    \"cluster\", \n    \"region\", \n    \"design_weight\", \n    \"response_status\", \n    \"nr_weight\", \n    \"nr_weight2\"\n    ]].drop_duplicates().head(15)\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      design_weight\n      response_status\n      nr_weight\n      nr_weight2\n    \n  \n  \n    \n      0\n      7\n      North\n      46.166667\n      ineligible\n      49.464286\n      46.166667\n    \n    \n      1\n      7\n      North\n      46.166667\n      respondent\n      54.410714\n      55.400000\n    \n    \n      4\n      7\n      North\n      46.166667\n      unknown\n      0.000000\n      0.000000\n    \n    \n      11\n      7\n      North\n      46.166667\n      non-respondent\n      0.000000\n      0.000000\n    \n    \n      15\n      10\n      North\n      50.783333\n      non-respondent\n      0.000000\n      0.000000\n    \n    \n      16\n      10\n      North\n      50.783333\n      respondent\n      70.733929\n      71.096667\n    \n    \n      19\n      10\n      North\n      50.783333\n      ineligible\n      54.410714\n      50.783333\n    \n    \n      21\n      10\n      North\n      50.783333\n      unknown\n      0.000000\n      0.000000\n    \n    \n      30\n      16\n      South\n      62.149123\n      respondent\n      66.588346\n      66.588346\n    \n    \n      35\n      16\n      South\n      62.149123\n      non-respondent\n      0.000000\n      0.000000\n    \n    \n      45\n      24\n      South\n      58.940741\n      respondent\n      63.852469\n      63.852469\n    \n    \n      47\n      24\n      South\n      58.940741\n      non-respondent\n      0.000000\n      0.000000\n    \n    \n      55\n      24\n      South\n      58.940741\n      ineligible\n      58.940741\n      58.940741\n    \n    \n      60\n      29\n      South\n      65.702778\n      unknown\n      0.000000\n      0.000000\n    \n    \n      61\n      29\n      South\n      65.702778\n      respondent\n      101.081197\n      102.204321\n    \n  \n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe default call of adjust() expects standard codes for response status that is “in”, “rr”, “nr”, and “uk” where “in” means ineligible, “rr” means respondent, “nr” means non-respondent, and “uk” means unknown eligibility.\n\n\nIn the call above, if we omit the parameter response_dict, then the run would fail with an assertion error message. The current error message is the following: The response status must only contains values in (‘in’, ‘rr’, ‘nr’, ‘uk’) or the mapping should be provided using response_dict parameter. For the call to run without using response_dict, it is necessary that the response status takes only values in the standard codes i.e. (“in”, “rr”, “nr”, “uk”). The variable associated with response_status can contain any code but a mapping is necessary when the response variable is not constructed using the standard codes.\nTo further illustrate the mapping of response status, let’s assume that we have response_status2 which has the values 100 for ineligible, 200 for non-respondent, 300 for respondent, and 999 for unknown.\n\nresponse_status2 = np.repeat(100, full_sample[\"response_status\"].shape[0])\nresponse_status2[full_sample[\"response_status\"] == \"non-respondent\"] = 200\nresponse_status2[full_sample[\"response_status\"] == \"respondent\"] = 300\nresponse_status2[full_sample[\"response_status\"] == \"unknown\"] = 999\n\npd.crosstab(response_status2, full_sample[\"response_status\"])\n\n\n\n\n\n  \n    \n      response_status\n      ineligible\n      non-respondent\n      respondent\n      unknown\n    \n    \n      row_0\n      \n      \n      \n      \n    \n  \n  \n    \n      100\n      16\n      0\n      0\n      0\n    \n    \n      200\n      0\n      23\n      0\n      0\n    \n    \n      300\n      0\n      0\n      106\n      0\n    \n    \n      999\n      0\n      0\n      0\n      5\n    \n  \n\n\n\n\nTo use response_status2, we need to map the values 100, 200, 300 and 999 to “in”, “rr”, “nr”, and “uk”. This mapping is done below using the Python dictionary status_mapping2. Using status_mapping2 in the function call adjust() will lead to the same adjustment as in the previous run i.e. nr_weight and nr_weight3 contain the same adjusted weights.\n\nstatus_mapping2 = {\"in\": 100, \"nr\": 200, \"rr\": 300, \"uk\": 999}\n\nfull_sample[\"nr_weight3\"] = SampleWeight().adjust(\n    samp_weight=full_sample[\"design_weight\"],\n    adjust_class=full_sample[[\"region\", \"cluster\"]],\n    resp_status=response_status2,\n    resp_dict=status_mapping2,\n)\n\nfull_sample[\n    [\"cluster\", \"region\", \"response_status\", \"nr_weight\", \"nr_weight3\"]\n    ].drop_duplicates().head()\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      response_status\n      nr_weight\n      nr_weight3\n    \n  \n  \n    \n      0\n      7\n      North\n      ineligible\n      49.464286\n      49.464286\n    \n    \n      1\n      7\n      North\n      respondent\n      54.410714\n      54.410714\n    \n    \n      4\n      7\n      North\n      unknown\n      0.000000\n      0.000000\n    \n    \n      11\n      7\n      North\n      non-respondent\n      0.000000\n      0.000000\n    \n    \n      15\n      10\n      North\n      non-respondent\n      0.000000\n      0.000000\n    \n  \n\n\n\n\nIf the response status variable only takes values “in”, “nr”, “rr” and “uk”, then it is not necessary to provide the mapping dictionary to the function i.e. resp_dict can be omitted from the function call adjust().\n\nresponse_status3 = np.repeat(\"in\", full_sample[\"response_status\"].shape[0])\nresponse_status3[full_sample[\"response_status\"] == \"non-respondent\"] = \"nr\"\nresponse_status3[full_sample[\"response_status\"] == \"respondent\"] = \"rr\"\nresponse_status3[full_sample[\"response_status\"] == \"unknown\"] = \"uk\"\n\nfull_sample[\"nr_weight4\"] = SampleWeight().adjust(\n    samp_weight=full_sample[\"design_weight\"],\n    adjust_class=full_sample[[\"region\", \"cluster\"]],\n    resp_status=response_status3,\n)\n\nfull_sample[\n    [\"cluster\", \"region\", \"response_status\", \"nr_weight\", \"nr_weight4\"]\n    ].drop_duplicates().head()\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      response_status\n      nr_weight\n      nr_weight4\n    \n  \n  \n    \n      0\n      7\n      North\n      ineligible\n      49.464286\n      49.464286\n    \n    \n      1\n      7\n      North\n      respondent\n      54.410714\n      54.410714\n    \n    \n      4\n      7\n      North\n      unknown\n      0.000000\n      0.000000\n    \n    \n      11\n      7\n      North\n      non-respondent\n      0.000000\n      0.000000\n    \n    \n      15\n      10\n      North\n      non-respondent\n      0.000000\n      0.000000\n    \n  \n\n\n\n\n\n# Just dropping a couple of variables \n# not needed for the rest of the tutorial\nfull_sample.drop(\n    columns=[\n        \"psu_prob\", \n        \"ssu_prob\", \n        \"inclusion_prob\", \n        \"nr_weight2\", \n        \"nr_weight3\", \n        \"nr_weight4\"\n        ], \n    inplace=True\n)"
  },
  {
    "objectID": "pages/weight_adj.html#poststratification",
    "href": "pages/weight_adj.html#poststratification",
    "title": "Sample Weight Adjustments",
    "section": "Poststratification",
    "text": "Poststratification\nPoststratification is useful to compensate for under-representation of the sample or to correct for nonsampling error. The most common poststratification method consists of adjusting the sample weights to ensure that they sum to known control values from reliable souces by adjustment classes (domains). Poststratification classes can be formed using variables beyond the ones involved in the sampling design. For example, socio-economic variables such as age group, gender, race and education are often used to form poststratification classes/cells.\n\n\n\n\n\n\nWarning\n\n\n\npoststratifying to totals that are known to be out of date, and thus likely inaccurate and/or unreliable may not improve the estimate. Use this with caution.\n\n\nLet’s assume that we have a reliable external source e.g. a recent census that provides the number of households by region. The external source has the following control data: 3700 households for East, 1500 for North, 2800 for South and 6500 for West.\nWe use the method poststratify() to ensure that the poststratified sample weights (ps_weight) sum to the know control totals by region. Note that the control totals are provided using the Python dictionary census_households.\n\ncensus_households = {\"East\": 3700, \"North\": 1500, \"South\": 2800, \"West\": 6500}\n\nfull_sample[\"ps_weight\"] = SampleWeight().poststratify(\n    samp_weight=full_sample[\"nr_weight\"], \n    control=census_households, \n    domain=full_sample[\"region\"]\n)\n\nfull_sample.head(15)\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      household\n      design_weight\n      response_status\n      nr_weight\n      ps_weight\n    \n  \n  \n    \n      0\n      7\n      North\n      72\n      46.166667\n      ineligible\n      49.464286\n      51.020408\n    \n    \n      1\n      7\n      North\n      73\n      46.166667\n      respondent\n      54.410714\n      56.122449\n    \n    \n      2\n      7\n      North\n      75\n      46.166667\n      respondent\n      54.410714\n      56.122449\n    \n    \n      3\n      7\n      North\n      715\n      46.166667\n      respondent\n      54.410714\n      56.122449\n    \n    \n      4\n      7\n      North\n      722\n      46.166667\n      unknown\n      0.000000\n      0.000000\n    \n    \n      5\n      7\n      North\n      724\n      46.166667\n      respondent\n      54.410714\n      56.122449\n    \n    \n      6\n      7\n      North\n      755\n      46.166667\n      respondent\n      54.410714\n      56.122449\n    \n    \n      7\n      7\n      North\n      761\n      46.166667\n      ineligible\n      49.464286\n      51.020408\n    \n    \n      8\n      7\n      North\n      764\n      46.166667\n      respondent\n      54.410714\n      56.122449\n    \n    \n      9\n      7\n      North\n      782\n      46.166667\n      respondent\n      54.410714\n      56.122449\n    \n    \n      10\n      7\n      North\n      795\n      46.166667\n      respondent\n      54.410714\n      56.122449\n    \n    \n      11\n      7\n      North\n      7111\n      46.166667\n      non-respondent\n      0.000000\n      0.000000\n    \n    \n      12\n      7\n      North\n      7112\n      46.166667\n      respondent\n      54.410714\n      56.122449\n    \n    \n      13\n      7\n      North\n      7117\n      46.166667\n      ineligible\n      49.464286\n      51.020408\n    \n    \n      14\n      7\n      North\n      7123\n      46.166667\n      respondent\n      54.410714\n      56.122449\n    \n  \n\n\n\n\nThe snippet of code below shows that the poststratified sample weights sum to the expected control totals that is 3700 households for East, 1500 for North, 2800 for South and 6500 for West.\n\nsum_of_weights = full_sample[\n    [\"region\", \"nr_weight\", \"ps_weight\"]\n    ].groupby(\"region\").sum()\nsum_of_weights.reset_index(inplace=True)\nsum_of_weights.head()\n\n\n\n\n\n  \n    \n      \n      region\n      nr_weight\n      ps_weight\n    \n  \n  \n    \n      0\n      East\n      3698.703391\n      3700.0\n    \n    \n      1\n      North\n      1454.250000\n      1500.0\n    \n    \n      2\n      South\n      2801.889620\n      2800.0\n    \n    \n      3\n      West\n      6485.783333\n      6500.0\n    \n  \n\n\n\n\nThe crosstable below shows that only one adjustment factor was calculated and applied per adjustment class or region.\n\nfull_sample[\"ps_adjust_fct\"] = \\\n    round(full_sample[\"ps_weight\"] / full_sample[\"nr_weight\"], 12)\n\npd.crosstab(full_sample[\"ps_adjust_fct\"], full_sample[\"region\"])\n\n\n\n\n\n  \n    \n      region\n      East\n      North\n      South\n      West\n    \n    \n      ps_adjust_fct\n      \n      \n      \n      \n    \n  \n  \n    \n      0.999326\n      0\n      0\n      38\n      0\n    \n    \n      1.000351\n      37\n      0\n      0\n      0\n    \n    \n      1.002192\n      0\n      0\n      0\n      23\n    \n    \n      1.031460\n      0\n      24\n      0\n      0\n    \n  \n\n\n\n\nIn some surveys, there is interest in keeping relative distribution of strata to some known distribution. For example, WHO EPI vaccination surveys often postratify sample weights to ensure that relative sizes of strata reflect offcial statistics e.g. census data. In most cases, the strata are based on some administrative divisions.\nFor example, assume that according to census data that East contains 25% of the households, North contains 10%, South contains 20% and West contains 45%. We can poststratify using the snippet of code below.\n\nknown_ratios = {\"East\": 0.25, \"North\": 0.10, \"South\": 0.20, \"West\": 0.45}\nfull_sample[\"ps_weight2\"] = SampleWeight().poststratify(\n    samp_weight=full_sample[\"nr_weight\"], \n    factor=known_ratios, \n    domain=full_sample[\"region\"]\n)\n\nfull_sample.head()\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      household\n      design_weight\n      response_status\n      nr_weight\n      ps_weight\n      ps_adjust_fct\n      ps_weight2\n    \n  \n  \n    \n      0\n      7\n      North\n      72\n      46.166667\n      ineligible\n      49.464286\n      51.020408\n      1.03146\n      49.117777\n    \n    \n      1\n      7\n      North\n      73\n      46.166667\n      respondent\n      54.410714\n      56.122449\n      1.03146\n      54.029554\n    \n    \n      2\n      7\n      North\n      75\n      46.166667\n      respondent\n      54.410714\n      56.122449\n      1.03146\n      54.029554\n    \n    \n      3\n      7\n      North\n      715\n      46.166667\n      respondent\n      54.410714\n      56.122449\n      1.03146\n      54.029554\n    \n    \n      4\n      7\n      North\n      722\n      46.166667\n      unknown\n      0.000000\n      0.000000\n      NaN\n      0.000000\n    \n  \n\n\n\n\n\nsum_of_weights2 = full_sample[\n    [\"region\", \"nr_weight\", \"ps_weight2\"]\n    ].groupby(\"region\").sum()\nsum_of_weights2.reset_index(inplace=True)\nsum_of_weights2[\"ratio\"] = \\\n    sum_of_weights2[\"ps_weight2\"] / sum(sum_of_weights2[\"ps_weight2\"])\nsum_of_weights2.head()\n\n\n\n\n\n  \n    \n      \n      region\n      nr_weight\n      ps_weight2\n      ratio\n    \n  \n  \n    \n      0\n      East\n      3698.703391\n      3610.156586\n      0.25\n    \n    \n      1\n      North\n      1454.250000\n      1444.062634\n      0.10\n    \n    \n      2\n      South\n      2801.889620\n      2888.125269\n      0.20\n    \n    \n      3\n      West\n      6485.783333\n      6498.281855\n      0.45\n    \n  \n\n\n\n\n\nCalibration\nCalibration is a more general concept for adjusting sample weights to sum to known constants. In this tutorial, we consider the generalized regression (GREG) class of calibration. Assume that we have \\(\\hat{\\mathbf{Y}} = \\sum_{i \\in s} w_i y_i\\) and know population totals \\(\\mathbf{X} = (\\mathbf{X}_1, ..., \\mathbf{X}_p)^T\\) are available. Working under the model \\(Y_i | \\mathbf{x}_i = \\mathbf{x}^T_i \\mathbf{\\beta} + \\epsilon_i\\), the GREG estimator of the population total is\n\\[\\hat{\\mathbf{Y}}_{GR} = \\hat{\\mathbf{Y}} + (\\mathbf{X} - \\hat{\\mathbf{X}})^T\\hat{\\mathbf{B}}\\]\nwhere \\(\\hat{\\mathbf{B}}\\) is the weighted least squares estimate of \\(\\mathbf{\\beta}\\) and \\(\\hat{\\mathbf{X}}\\) is the survey estimate of \\(\\mathbf{X}\\). The essential of the GREG approach is, under the regression model, to find the adjusted weights \\(w^{*}_i\\) that are the closest to \\(w_i\\), to minimize \\(h(z) = \\frac{\\sum_{i \\in s} c_i(w_i - z_i)}{w_i}\\).\nLet us simulate three auxiliary variables that is education, poverty and under_five (number of children under five in the household) and assume that we have the following control totals.\n\nTotal number of under five children: 6300 in the East, 4000 in the North, 6500 in the South and 14000 in the West.\nPoverty (Yes: in poverty / No: not in poverty)\n\n\n\nRegion  \nPoverty  \nNumber of households\n\n\n\n\nEast\nNo\n2600\n\n\n\nYes\n1200\n\n\nNorth\nNo\n1500\n\n\n\nYes\n200\n\n\nSouth\nNo\n1800\n\n\n\nYes\n1100\n\n\nWest\nNo\n4500\n\n\n\nYes\n2200\n\n\n\nEducation (Low: less than secondary, Medium: secondary completed, and High: More than secondary)\n\n\n\nRegion  \nEducation  \nNumber of households\n\n\n\n\nEast\nLow\n2000\n\n\n\nMedium\n1400\n\n\n\nHigh\n350\n\n\nNorth\nLow\n550\n\n\n\nMedium\n700\n\n\n\nHigh\n250\n\n\nSouth\nLow\n1300\n\n\n\nMedium\n1200\n\n\n\nHigh\n350\n\n\nWest\nLow\n2100\n\n\n\nMedium\n4000\n\n\n\nHigh\n500\n\n\n\n\n\nnp.random.seed(150)\nfull_sample[\"education\"] = np.random.choice(\n    (\"Low\", \"Medium\", \"High\"), \n    size=150, \n    p=(0.40, 0.50, 0.10)\n    )\nfull_sample[\"poverty\"] = np.random.choice((0, 1), size=150, p=(0.70, 0.30))\nfull_sample[\"under_five\"] = np.random.choice(\n    (0, 1, 2, 3, 4, 5), \n    size=150, \n    p=(0.05, 0.35, 0.25, 0.20, 0.10, 0.05)\n    )\n\nfull_sample[[\n    \"cluster\", \n    \"region\", \n    \"household\", \n    \"nr_weight\", \n    \"education\", \n    \"poverty\", \n    \"under_five\"\n    ]].head()\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      household\n      nr_weight\n      education\n      poverty\n      under_five\n    \n  \n  \n    \n      0\n      7\n      North\n      72\n      49.464286\n      High\n      1\n      1\n    \n    \n      1\n      7\n      North\n      73\n      54.410714\n      Low\n      0\n      3\n    \n    \n      2\n      7\n      North\n      75\n      54.410714\n      Medium\n      0\n      2\n    \n    \n      3\n      7\n      North\n      715\n      54.410714\n      Medium\n      1\n      2\n    \n    \n      4\n      7\n      North\n      722\n      0.000000\n      Medium\n      0\n      2\n    \n  \n\n\n\n\nWe now will calibrate the nonreponse weight (nr_weight) to ensure that the estimated number of households in poverty is equal to 4,700 and the estimated total number of children under five is 30,8500. The control numbers 4,700 and 30,800 are obtained from the table above.\nThe class SampleWeight() uses the method calibrate(samp_weight, aux_vars, control, domain, scale, bounded, modified) to adjust the weight using the GREG approach. * The contol values must be stored in a python dictionnary i.e. totals = {“poverty”: 4700, “under_five”: 30800}. In this case, we have two numerical variables poverty with values in {0, 1} and under_five with values in {0, 1, 2, 3, 4, 5}. * aux_vars is the matrix of covariates.\n\ntotals = {\"poverty\": 4700, \"under_five\": 30800}\n\nfull_sample[\"calib_weight\"] = SampleWeight().calibrate(\n    full_sample[\"nr_weight\"], full_sample[[\"poverty\", \"under_five\"]], totals\n)\n\nfull_sample[[\"cluster\", \"region\", \"household\", \"nr_weight\", \"calib_weight\"]].head(15)\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      household\n      nr_weight\n      calib_weight\n    \n  \n  \n    \n      0\n      7\n      North\n      72\n      49.464286\n      50.432441\n    \n    \n      1\n      7\n      North\n      73\n      54.410714\n      57.233887\n    \n    \n      2\n      7\n      North\n      75\n      54.410714\n      56.292829\n    \n    \n      3\n      7\n      North\n      715\n      54.410714\n      56.416743\n    \n    \n      4\n      7\n      North\n      722\n      0.000000\n      0.000000\n    \n    \n      5\n      7\n      North\n      724\n      54.410714\n      57.233887\n    \n    \n      6\n      7\n      North\n      755\n      54.410714\n      57.233887\n    \n    \n      7\n      7\n      North\n      761\n      49.464286\n      49.464286\n    \n    \n      8\n      7\n      North\n      764\n      54.410714\n      56.292829\n    \n    \n      9\n      7\n      North\n      782\n      54.410714\n      57.233887\n    \n    \n      10\n      7\n      North\n      795\n      54.410714\n      58.174944\n    \n    \n      11\n      7\n      North\n      7111\n      0.000000\n      0.000000\n    \n    \n      12\n      7\n      North\n      7112\n      54.410714\n      59.116002\n    \n    \n      13\n      7\n      North\n      7117\n      49.464286\n      50.319793\n    \n    \n      14\n      7\n      North\n      7123\n      54.410714\n      56.292829\n    \n  \n\n\n\n\nWe can confirm that the estimated totals for the auxiliary variables are equal to their control values.\n\npoverty = full_sample[\"poverty\"]\nunder_5 = full_sample[\"under_five\"]\nnr_weight = full_sample[\"nr_weight\"]\ncalib_weight = full_sample[\"calib_weight\"]\n\nprint(\n    f\"\"\"\\nTotal estimated number of poor households was \n    {sum(poverty*nr_weight):.2f} before adjustment and \n    {sum(poverty*calib_weight):.2f} after adjustment.\\n\"\"\"\n)\nprint(\n    f\"\"\"Total estimated number of children under 5 was \n    {sum(under_5*nr_weight):.2f} before adjustment and \n    {sum(under_5*calib_weight):.2f} after adjustment.\\n\"\"\"\n)\n\n\nTotal estimated number of poor households was \n    4521.84 before adjustment and \n    4700.00 after adjustment.\n\nTotal estimated number of children under 5 was \n    29442.52 before adjustment and \n    30800.00 after adjustment.\n\n\n\nIf we want to control by domain then we can do so using the parameter domain of calibrate(). First we need to update the python dictionary holding the control values. Now, those values have to be provided for each domain. Note that the dictionary is now a nested dictionary where the higher level keys hold the domain values i.e. East, North, South and West. Then the higher level values of the dictionary are the dictionaries providing mapping for the auxiliary variables and the corresponding control values.\n\ntotals_by_domain = {\n    \"East\": {\"poverty\": 1200, \"under_five\": 6300},\n    \"North\": {\"poverty\": 200, \"under_five\": 4000},\n    \"South\": {\"poverty\": 1100, \"under_five\": 6500},\n    \"West\": {\"poverty\": 2200, \"under_five\": 14000},\n}\n\nfull_sample[\"calib_weight_d\"] = SampleWeight().calibrate(\n    full_sample[\"nr_weight\"], \n    full_sample[[\"poverty\", \"under_five\"]], \n    totals_by_domain, full_sample[\"region\"]\n)\n\nfull_sample[[\n    \"cluster\", \n    \"region\", \n    \"household\", \n    \"nr_weight\", \n    \"calib_weight\", \n    \"calib_weight_d\"\n    ]].head(15)\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      household\n      nr_weight\n      calib_weight\n      calib_weight_d\n    \n  \n  \n    \n      0\n      7\n      North\n      72\n      49.464286\n      50.432441\n      40.892864\n    \n    \n      1\n      7\n      North\n      73\n      54.410714\n      57.233887\n      61.852139\n    \n    \n      2\n      7\n      North\n      75\n      54.410714\n      56.292829\n      59.371664\n    \n    \n      3\n      7\n      North\n      715\n      54.410714\n      56.416743\n      47.462625\n    \n    \n      4\n      7\n      North\n      722\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      5\n      7\n      North\n      724\n      54.410714\n      57.233887\n      61.852139\n    \n    \n      6\n      7\n      North\n      755\n      54.410714\n      57.233887\n      61.852139\n    \n    \n      7\n      7\n      North\n      761\n      49.464286\n      49.464286\n      49.464286\n    \n    \n      8\n      7\n      North\n      764\n      54.410714\n      56.292829\n      59.371664\n    \n    \n      9\n      7\n      North\n      782\n      54.410714\n      57.233887\n      61.852139\n    \n    \n      10\n      7\n      North\n      795\n      54.410714\n      58.174944\n      64.332614\n    \n    \n      11\n      7\n      North\n      7111\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      12\n      7\n      North\n      7112\n      54.410714\n      59.116002\n      66.813089\n    \n    \n      13\n      7\n      North\n      7117\n      49.464286\n      50.319793\n      51.719263\n    \n    \n      14\n      7\n      North\n      7123\n      54.410714\n      56.292829\n      59.371664\n    \n  \n\n\n\n\nNote that the GREG domain estimates above do not have the additive property. That is the GREG domain estimates do not sum to the overal GREG estimate. To illustrate this, let’s assume that we want to estimate the number of households.\n\nprint(f\"\\nThe number of households using the overall GREG is: \\\n    {sum(full_sample['calib_weight']):.2f} \\n\")\nprint(f\"The number of households using the domain GREG is: \\\n    {sum(full_sample['calib_weight_d']):.2f} \\n\")\n\n\nThe number of households using the overall GREG is:     14960.15 \n\nThe number of households using the domain GREG is:     14959.01 \n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf the additive flag is set to True, the sum of the domain estimates will be equal to the GREG overal estimate.\n\n\n\ntotals_by_domain = {\n    \"East\": {\"poverty\": 1200, \"under_five\": 6300},\n    \"North\": {\"poverty\": 200, \"under_five\": 4000},\n    \"South\": {\"poverty\": 1100, \"under_five\": 6500},\n    \"West\": {\"poverty\": 2200, \"under_five\": 14000},\n}\n\ncalib_weight3 = SampleWeight().calibrate(\n    full_sample[\"nr_weight\"],\n    full_sample[[\"poverty\", \"under_five\"]],\n    totals_by_domain,\n    full_sample[\"region\"],\n    additive=True,\n)\n\n\nunder_5 = np.array(full_sample[\"under_five\"])\nprint(f\"\\nEach column can be used to estimate a domain: \\\n{np.sum(np.transpose(calib_weight3) * under_5, axis=1)}\\n\")\n\n\nEach column can be used to estimate a domain: [ 6300.  4000.  6500. 14000.]\n\n\n\n\nprint(f\"The number of households using the overall GREG is: \\\n{sum(full_sample['calib_weight']):.2f} \\n\")\n\nThe number of households using the overall GREG is: 14960.15 \n\n\n\n\nprint(f\"The number of households using the domain GREG is: \\\n{sum(full_sample['calib_weight_d']):.2f} (additive=False)\\n\")\n\nThe number of households using the domain GREG is: 14959.01 (additive=False)\n\n\n\n\nprint(f\"The number of households using the domain GREG is: \\\n{np.sum(np.transpose(calib_weight3)):.2f} (additive=True) \\n\")\n\nThe number of households using the domain GREG is: 14960.15 (additive=True)"
  },
  {
    "objectID": "pages/weight_adj.html#normalization",
    "href": "pages/weight_adj.html#normalization",
    "title": "Sample Weight Adjustments",
    "section": "Normalization",
    "text": "Normalization\nDHS and MICS normalize the final sample weights to sum to the sample size. We can use the class method normalize() to ensure that the sample weight sum to some constant across the sample or by normalization domain e.g. stratum.\n\n\n\n\n\n\nNote\n\n\n\nnormalization is mostly added here for completeness but it is sheldom to see sample weight normalize in large scale household surveys. One major downside of normalized weights is the Note that estimation of totals does not make sense with normalized weights.\n\n\n\nfull_sample[\"norm_weight\"] = \\\n    SampleWeight().normalize(samp_weight=full_sample[\"nr_weight\"])\nfull_sample[[\"cluster\", \"region\", \"nr_weight\", \"norm_weight\"]].head(25)\n\nprint((full_sample.shape[0], full_sample[\"norm_weight\"].sum()))\n\n(150, 150.0)\n\n\nWhen normalize() is called with only the parameter sample_weight then the sample weights are normalize to sum to the length of the sample weight vector.\n\nfull_sample[\"norm_weight2\"] = \\\n    SampleWeight().normalize(\n        samp_weight=full_sample[\"nr_weight\"], \n        control=300\n        )\n\nprint(full_sample[\"norm_weight2\"].sum())\n\n300.0\n\n\n\nfull_sample[\"norm_weight3\"] = SampleWeight().normalize(\n    samp_weight=full_sample[\"nr_weight\"], \n    domain=full_sample[\"region\"]\n    )\n\nweight_sum = full_sample.groupby([\"region\"]).sum()\nweight_sum.reset_index(inplace=True)\nweight_sum[[\"region\", \"nr_weight\", \"norm_weight\", \"norm_weight3\"]]\n\n\n\n\n\n  \n    \n      \n      region\n      nr_weight\n      norm_weight\n      norm_weight3\n    \n  \n  \n    \n      0\n      East\n      3698.703391\n      38.419768\n      45.0\n    \n    \n      1\n      North\n      1454.250000\n      15.105820\n      30.0\n    \n    \n      2\n      South\n      2801.889620\n      29.104239\n      45.0\n    \n    \n      3\n      West\n      6485.783333\n      67.370173\n      30.0\n    \n  \n\n\n\n\n\nnorm_level = {\"East\": 10, \"North\": 20, \"South\": 30, \"West\": 50}\n\nfull_sample[\"norm_weight4\"] = SampleWeight().normalize(\n    samp_weight=full_sample[\"nr_weight\"], \n    control=norm_level, \n    domain=full_sample[\"region\"]\n    )\n\nweight_sum = full_sample.groupby([\"region\"]).sum()\nweight_sum.reset_index(inplace=True)\nweight_sum[[\"region\", \"nr_weight\", \"norm_weight\", \"norm_weight3\", \"norm_weight4\",]]\n\n\n\n\n\n  \n    \n      \n      region\n      nr_weight\n      norm_weight\n      norm_weight3\n      norm_weight4\n    \n  \n  \n    \n      0\n      East\n      3698.703391\n      38.419768\n      45.0\n      10.0\n    \n    \n      1\n      North\n      1454.250000\n      15.105820\n      30.0\n      20.0\n    \n    \n      2\n      South\n      2801.889620\n      29.104239\n      45.0\n      30.0\n    \n    \n      3\n      West\n      6485.783333\n      67.370173\n      30.0\n      50.0"
  },
  {
    "objectID": "pages/size_stagedesign.html",
    "href": "pages/size_stagedesign.html",
    "title": "Sample Size for Stage Design",
    "section": "",
    "text": "In the cells below, we illustrate a simple example of sample size calculation in the context of household surveys using stage sampling designs. Let’s assume that we want to calculate sample size for a vaccination survey in Senegal. We want to stratify the sample by administrative region. We will use the 2017 Senegal Demographic and Health Survey (DHS) to get an idea of the vaccination coverage rates for some main vaccine-doses. Below, we show coverage rates of hepatitis B birth dose (hepB0) vaccine, first and third dose of diphtheria, tetanus and pertussis (DTP), first dose of measles containing vaccine (MCV1) and coverage of basic vaccination. Basic vaccination refers to the 12-23 months old children that received BCG vaccine, three doses of DTP containing vaccine, three doses of polio vaccine, and the first dose of measles containing vaccine.The table below shows the 2017 Senegal DHS vaccination coverage of a few vaccine-doses for children aged 12 to 23 months old.\nThe 2017 Senegal DHS data collection happened from April to December 2018. Therefore, the data shown in the table represent children born from October 2016 to December 2017. For the purpose of this tutorial, we will assume that these vaccine coverage rates still hold. Furthermore, we will use the basic vaccination coverage rates to calculate sample size."
  },
  {
    "objectID": "pages/size_stagedesign.html#wald-method",
    "href": "pages/size_stagedesign.html#wald-method",
    "title": "Sample Size for Stage Design",
    "section": "Wald method",
    "text": "Wald method\nThe first step is to create and object using the SampleSize class with the parameter of interest, the sample size calculation method, and the stratification status. In this example, we want to calculate sample size for proportions, using wald method for a stratified design. This is achived with the following snippet of code.\n\nSampleSize(\n    param=\"proportion\", method=\"wald\", strat=True\n)\n\nBecause, we are using a stratified sample design, it is best to specify the expected coverage levels by stratum. If the information is not available then aggregated values can be used across the strata. The 2017 Senegal DHS published the coverage rates by region hence we have the information available by stratum. To provide the informmation to Samplics we use the python dictionaries as follows\n\nexpected_coverage = {\n    \"Dakar\": 0.849,\n    \"Ziguinchor\": 0.809,\n    \"Diourbel\": 0.682,\n    \"Saint-Louis\": 0.806,\n    \"Tambacounda\": 0.470,\n    \"Kaolack\": 0.797,\n    \"Thies\": 0.834,\n    \"Louga\": 0.678,\n    \"Fatick\": 0.766,\n    \"Kolda\": 0.637,\n    \"Matam\": 0.687,\n    \"Kaffrine\": 0.766,\n    \"Kedougou\": 0.336,\n    \"Sedhiou\": 0.742,\n}\n\nNow, we want to calculate the sample size with desired precision of 0.07 which means that we want the expected vaccination coverage rates to have 7% half confidence intervals e.g. expected rate of 90% will have a confidence interval of [83%, 97%]. Note that the desired precision can be specified by stratum in a similar way as the target coverage using a python dictionary.\nGiven that information, we can calculate the sample size using SampleSize class as follows.\n\nfrom samplics.utils.types import SizeMethod, PopParam\n\n# Declare the sample size calculation parameters\nsen_vaccine_wald = SampleSize(\n    param=PopParam.prop, method=SizeMethod.wald, strat=True\n)\n\n# calculate the sample size\nsen_vaccine_wald.calculate(target=expected_coverage, half_ci=0.07)\n\n# show the calculated sample size\nprint(f\"\\nCalculated sample sizes by stratum: \")\nsen_vaccine_wald.samp_size\n\n\nCalculated sample sizes by stratum: \n\n\n{'Dakar': 101,\n 'Ziguinchor': 122,\n 'Diourbel': 171,\n 'Saint-Louis': 123,\n 'Tambacounda': 196,\n 'Kaolack': 127,\n 'Thies': 109,\n 'Louga': 172,\n 'Fatick': 141,\n 'Kolda': 182,\n 'Matam': 169,\n 'Kaffrine': 141,\n 'Kedougou': 175,\n 'Sedhiou': 151}\n\n\nSampleSize calculates the sample sizes and store the in teh samp_size attributes which is a python dictinary object. If a dataframe is better suited for the use case, the method to_dataframe() can be used to return a pandas dataframe.\n\nsen_vaccine_wald.to_dataframe()\n\n\n\n\n\n  \n    \n      \n      _param\n      _stratum\n      _target\n      _sigma\n      _half_ci\n      _samp_size\n    \n  \n  \n    \n      0\n      PopParam.prop\n      Dakar\n      0.849\n      0.128199\n      0.07\n      101\n    \n    \n      1\n      PopParam.prop\n      Ziguinchor\n      0.809\n      0.154519\n      0.07\n      122\n    \n    \n      2\n      PopParam.prop\n      Diourbel\n      0.682\n      0.216876\n      0.07\n      171\n    \n    \n      3\n      PopParam.prop\n      Saint-Louis\n      0.806\n      0.156364\n      0.07\n      123\n    \n    \n      4\n      PopParam.prop\n      Tambacounda\n      0.470\n      0.249100\n      0.07\n      196\n    \n    \n      5\n      PopParam.prop\n      Kaolack\n      0.797\n      0.161791\n      0.07\n      127\n    \n    \n      6\n      PopParam.prop\n      Thies\n      0.834\n      0.138444\n      0.07\n      109\n    \n    \n      7\n      PopParam.prop\n      Louga\n      0.678\n      0.218316\n      0.07\n      172\n    \n    \n      8\n      PopParam.prop\n      Fatick\n      0.766\n      0.179244\n      0.07\n      141\n    \n    \n      9\n      PopParam.prop\n      Kolda\n      0.637\n      0.231231\n      0.07\n      182\n    \n    \n      10\n      PopParam.prop\n      Matam\n      0.687\n      0.215031\n      0.07\n      169\n    \n    \n      11\n      PopParam.prop\n      Kaffrine\n      0.766\n      0.179244\n      0.07\n      141\n    \n    \n      12\n      PopParam.prop\n      Kedougou\n      0.336\n      0.223104\n      0.07\n      175\n    \n    \n      13\n      PopParam.prop\n      Sedhiou\n      0.742\n      0.191436\n      0.07\n      151\n    \n  \n\n\n\n\nThe sample size calculation above assumes that the design effect (DEFF) was equal to 1. A design effect of 1 correspond to sampling design with a variance equivalent to a simple random selection of same sample size. In the context of complex sampling designs, DEFF is often different from 1. Stage sampling and unequal weights usually increase the design effect above 1. The 2017 Senegal DHS indicated a design effect equal to 1.963 (1.401^2) for basic vaccination. Hence, to calculate the sample size, we will use the design effect provided by DHS.\n\nsen_vaccine_wald.calculate(\n    target=expected_coverage, half_ci=0.07, deff=1.401 ** 2\n)\n\nsen_vaccine_wald.to_dataframe()\n\n\n\n\n\n  \n    \n      \n      _param\n      _stratum\n      _target\n      _sigma\n      _half_ci\n      _samp_size\n    \n  \n  \n    \n      0\n      PopParam.prop\n      Dakar\n      0.849\n      0.128199\n      0.07\n      198\n    \n    \n      1\n      PopParam.prop\n      Ziguinchor\n      0.809\n      0.154519\n      0.07\n      238\n    \n    \n      2\n      PopParam.prop\n      Diourbel\n      0.682\n      0.216876\n      0.07\n      334\n    \n    \n      3\n      PopParam.prop\n      Saint-Louis\n      0.806\n      0.156364\n      0.07\n      241\n    \n    \n      4\n      PopParam.prop\n      Tambacounda\n      0.470\n      0.249100\n      0.07\n      384\n    \n    \n      5\n      PopParam.prop\n      Kaolack\n      0.797\n      0.161791\n      0.07\n      249\n    \n    \n      6\n      PopParam.prop\n      Thies\n      0.834\n      0.138444\n      0.07\n      214\n    \n    \n      7\n      PopParam.prop\n      Louga\n      0.678\n      0.218316\n      0.07\n      336\n    \n    \n      8\n      PopParam.prop\n      Fatick\n      0.766\n      0.179244\n      0.07\n      276\n    \n    \n      9\n      PopParam.prop\n      Kolda\n      0.637\n      0.231231\n      0.07\n      356\n    \n    \n      10\n      PopParam.prop\n      Matam\n      0.687\n      0.215031\n      0.07\n      331\n    \n    \n      11\n      PopParam.prop\n      Kaffrine\n      0.766\n      0.179244\n      0.07\n      276\n    \n    \n      12\n      PopParam.prop\n      Kedougou\n      0.336\n      0.223104\n      0.07\n      344\n    \n    \n      13\n      PopParam.prop\n      Sedhiou\n      0.742\n      0.191436\n      0.07\n      295\n    \n  \n\n\n\n\nSince the sample design is stratified, the sample size calculation will be more precised if DEFF is specified at the stratum level which is available from the 2017 Senegal DHS provided report. Some regions have a design effect below 1. To be conservative with our sample size calculation, we will use 1.21 as the minimum design effect to use in the sample size calculation.\n\n# Target coverage rates\nexpected_deff = {\n    \"Dakar\": 1.100 ** 2,\n    \"Ziguinchor\": 1.100 ** 2,\n    \"Diourbel\": 1.346 ** 2,\n    \"Saint-Louis\": 1.484 ** 2,\n    \"Tambacounda\": 1.366 ** 2,\n    \"Kaolack\": 1.360 ** 2,\n    \"Thies\": 1.109 ** 2,\n    \"Louga\": 1.902 ** 2,\n    \"Fatick\": 1.100 ** 2,\n    \"Kolda\": 1.217 ** 2,\n    \"Matam\": 1.403 ** 2,\n    \"Kaffrine\": 1.256 ** 2,\n    \"Kedougou\": 2.280 ** 2,\n    \"Sedhiou\": 1.335 ** 2,\n}\n\n# Calculate sample sizes using deff at the stratum level\nsen_vaccine_wald.calculate(\n    target=expected_coverage, half_ci=0.07, deff=expected_deff\n)\n\n# Convert sample sizes to a dataframe\nsen_vaccine_wald.to_dataframe()\n\n\n\n\n\n  \n    \n      \n      _param\n      _stratum\n      _target\n      _sigma\n      _half_ci\n      _samp_size\n    \n  \n  \n    \n      0\n      PopParam.prop\n      Dakar\n      0.849\n      0.128199\n      0.07\n      122\n    \n    \n      1\n      PopParam.prop\n      Ziguinchor\n      0.809\n      0.154519\n      0.07\n      147\n    \n    \n      2\n      PopParam.prop\n      Diourbel\n      0.682\n      0.216876\n      0.07\n      309\n    \n    \n      3\n      PopParam.prop\n      Saint-Louis\n      0.806\n      0.156364\n      0.07\n      270\n    \n    \n      4\n      PopParam.prop\n      Tambacounda\n      0.470\n      0.249100\n      0.07\n      365\n    \n    \n      5\n      PopParam.prop\n      Kaolack\n      0.797\n      0.161791\n      0.07\n      235\n    \n    \n      6\n      PopParam.prop\n      Thies\n      0.834\n      0.138444\n      0.07\n      134\n    \n    \n      7\n      PopParam.prop\n      Louga\n      0.678\n      0.218316\n      0.07\n      620\n    \n    \n      8\n      PopParam.prop\n      Fatick\n      0.766\n      0.179244\n      0.07\n      171\n    \n    \n      9\n      PopParam.prop\n      Kolda\n      0.637\n      0.231231\n      0.07\n      269\n    \n    \n      10\n      PopParam.prop\n      Matam\n      0.687\n      0.215031\n      0.07\n      332\n    \n    \n      11\n      PopParam.prop\n      Kaffrine\n      0.766\n      0.179244\n      0.07\n      222\n    \n    \n      12\n      PopParam.prop\n      Kedougou\n      0.336\n      0.223104\n      0.07\n      910\n    \n    \n      13\n      PopParam.prop\n      Sedhiou\n      0.742\n      0.191436\n      0.07\n      268\n    \n  \n\n\n\n\nThe sample size calculation above does not account for attrition of sample sizes due to non-response. In the 2017 Semegal DHS, the overal household and women reponse rate was abou 94.2%.\n\n# Calculate sample sizes with a resp_rate of 94.2%\nsen_vaccine_wald.calculate(\n    target=expected_coverage, \n    half_ci=0.07, \n    deff=expected_deff, \n    resp_rate=0.942\n)\n\n# Convert sample sizes to a dataframe\nsen_vaccine_wald.to_dataframe(\n    col_names=[\n        \"Parameter\",\n        \"region\",\n        \"vaccine_cov\",\n        \"stderr\",\n        \"half_ci\",\n        \"count_12_23\",\n    ]\n)\n\n\n\n\n\n  \n    \n      \n      Parameter\n      region\n      vaccine_cov\n      stderr\n      half_ci\n      count_12_23\n    \n  \n  \n    \n      0\n      PopParam.prop\n      Dakar\n      0.849\n      0.128199\n      0.07\n      130\n    \n    \n      1\n      PopParam.prop\n      Ziguinchor\n      0.809\n      0.154519\n      0.07\n      156\n    \n    \n      2\n      PopParam.prop\n      Diourbel\n      0.682\n      0.216876\n      0.07\n      328\n    \n    \n      3\n      PopParam.prop\n      Saint-Louis\n      0.806\n      0.156364\n      0.07\n      287\n    \n    \n      4\n      PopParam.prop\n      Tambacounda\n      0.470\n      0.249100\n      0.07\n      387\n    \n    \n      5\n      PopParam.prop\n      Kaolack\n      0.797\n      0.161791\n      0.07\n      250\n    \n    \n      6\n      PopParam.prop\n      Thies\n      0.834\n      0.138444\n      0.07\n      142\n    \n    \n      7\n      PopParam.prop\n      Louga\n      0.678\n      0.218316\n      0.07\n      658\n    \n    \n      8\n      PopParam.prop\n      Fatick\n      0.766\n      0.179244\n      0.07\n      181\n    \n    \n      9\n      PopParam.prop\n      Kolda\n      0.637\n      0.231231\n      0.07\n      286\n    \n    \n      10\n      PopParam.prop\n      Matam\n      0.687\n      0.215031\n      0.07\n      353\n    \n    \n      11\n      PopParam.prop\n      Kaffrine\n      0.766\n      0.179244\n      0.07\n      236\n    \n    \n      12\n      PopParam.prop\n      Kedougou\n      0.336\n      0.223104\n      0.07\n      966\n    \n    \n      13\n      PopParam.prop\n      Sedhiou\n      0.742\n      0.191436\n      0.07\n      284"
  },
  {
    "objectID": "pages/size_stagedesign.html#fleiss-method",
    "href": "pages/size_stagedesign.html#fleiss-method",
    "title": "Sample Size for Stage Design",
    "section": "Fleiss method",
    "text": "Fleiss method\nThe World Health Organization (WHO) recommends using the Fleiss method for calculating sample size for vaccination coverage survey, as specified in the following guideline document: https://www.who.int/immunization/documents/who_ivb_18.09/en/. To use the Fleiss method, the examples shown above are the same with method=\"fleiss\".\n\nsen_vaccine_fleiss = SampleSize(\n    param=PopParam.prop, \n    method=SizeMethod.fleiss, \n    strat=True\n)\n\nsen_vaccine_fleiss.calculate(\n    target=expected_coverage, \n    half_ci=0.07, \n    deff=expected_deff, \n    resp_rate=0.942\n)\n\nsen_vaccine_sample = sen_vaccine_fleiss.to_dataframe(\n    col_names=[\n        \"Parameter\",\n        \"region\",\n        \"vaccine_cov\",\n        \"stderr\",\n        \"half_ci\",\n        \"count_12_23\",\n    ]\n)\nsen_vaccine_sample.head(15)\n\n\n\n\n\n  \n    \n      \n      Parameter\n      region\n      vaccine_cov\n      stderr\n      half_ci\n      count_12_23\n    \n  \n  \n    \n      0\n      PopParam.prop\n      Dakar\n      0.849\n      0.128199\n      0.07\n      190\n    \n    \n      1\n      PopParam.prop\n      Ziguinchor\n      0.809\n      0.154519\n      0.07\n      210\n    \n    \n      2\n      PopParam.prop\n      Diourbel\n      0.682\n      0.216876\n      0.07\n      398\n    \n    \n      3\n      PopParam.prop\n      Saint-Louis\n      0.806\n      0.156364\n      0.07\n      384\n    \n    \n      4\n      PopParam.prop\n      Tambacounda\n      0.470\n      0.249100\n      0.07\n      410\n    \n    \n      5\n      PopParam.prop\n      Kaolack\n      0.797\n      0.161791\n      0.07\n      329\n    \n    \n      6\n      PopParam.prop\n      Thies\n      0.834\n      0.138444\n      0.07\n      201\n    \n    \n      7\n      PopParam.prop\n      Louga\n      0.678\n      0.218316\n      0.07\n      794\n    \n    \n      8\n      PopParam.prop\n      Fatick\n      0.766\n      0.179244\n      0.07\n      228\n    \n    \n      9\n      PopParam.prop\n      Kolda\n      0.637\n      0.231231\n      0.07\n      325\n    \n    \n      10\n      PopParam.prop\n      Matam\n      0.687\n      0.215031\n      0.07\n      432\n    \n    \n      11\n      PopParam.prop\n      Kaffrine\n      0.766\n      0.179244\n      0.07\n      297\n    \n    \n      12\n      PopParam.prop\n      Kedougou\n      0.336\n      0.223104\n      0.07\n      1140\n    \n    \n      13\n      PopParam.prop\n      Sedhiou\n      0.742\n      0.191436\n      0.07\n      348\n    \n  \n\n\n\n\nAt this point, we have the number of 12-23 months needed to achieve the desired precision given the expected proportions using wald or fleiss calculation methods."
  },
  {
    "objectID": "pages/datasets.html",
    "href": "pages/datasets.html",
    "title": "Datasets",
    "section": "",
    "text": "Tip\n\n\n\na dataset can be loaded using the function load_xxx() where xxx indicates the dataset name.\nFor example, load_psu_frame() loads the PSU frame dataset.\n\n\nThese functions return a dictionary with the following members: name, description, nrows, ncols, design, source, and, data. The current list of datasets is the following:\n\nBirth: This dataset represent a city data of categories of birth by age group. The dataset was obtained through the public stata API. Use load_birth() to load the dataset.\nCountyCrop and CountryCropMeans: These datasets were used by Battese, Harter, and Fuller (1988) for their pioner paper on small area estimation. Use load_county_crop() and load_county_crop_means() to load the datasets.\nExpenditureMilk: The Milk Expenditure data contains 43 observations on the average expenditure on fresh milk for the year 1989. This dataset was originally used by Arora and Lahiri (1997) and later by You and Chapman (2006). Use load_expenditure_milk() to load the dataset.\nNhanes2, Nhanes2brr, and Nhanes2jk: these datasets were obtained from the NHANES (McDowell et al. 1981)_. As mentioned above, the datasets are only subsets of the full sample and do not represent the NHANES II study. This data is only useful for illustrating the syntax of samplics. These datasets should not be used to conduct any analysis of NHANES nor use the numbers for any statistical analysis. The original data was obtained through the public stata API. Use load_nhanes2(), load_nhanes2brr(), and load_nhanes2jk() to load the datasets.\nNmihs: The dataset is a subset of the National Maternal and Infant Health Survey (NMIHS) sample (Gonzalez Jr, N, and C 1992). The dataset should not be used to conduct any analysis of NMIHS nor use the numbers for any statistical analysis. The original data was obtained through the public stata API. Use load_nmihs() to load the dataset.\nPSUFrame, PSUSample, and SSUSample: these are simulated datasets to illustrate the selectionof primary and secondary sampling units. Use load_psu_frame(), load_psu_sample(), and load_ssu_sample() to load the datasets.\n\nLet’s assume we want to load the PSU frame, we could write the following code.\n\nimport samplics\n\n# Import the appropriate class.\nfrom samplics.datasets import load_psu_frame\n\n# Load the dataset and its metadata into \n# the variable (dictionary) psu_frame_dict\npsu_frame_dict = load_psu_frame()\n\n# Store the datasets in the variable psu_frame (optional)\npsu_frame = psu_frame_dict[\"data\"]\n\n\n\n\n\n\n\nImportant\n\n\n\nThe datasets should not be used for any statistical analysis.  No number shown in this tutorial shall be used for any statistical analysis.  All the examples are exclusively for illustrating the syntax and APIs of Samplics.\n\n\n\n\n\n\nReferences\n\nBattese, G E, R M Harter, and W A Fuller. 1988. “An Error-Components Model for Prediction of County Crop Areas Using Survey and Satellite Data.” J. Amer. Statist. Assoc. 83: 28–36.\n\n\nGonzalez Jr, J F, Krauss N, and Scott C. 1992. “Estimation in the 1988 National Maternal and Infant Health Survey.” In Proceedings of the Section on Statistics Education, edited by American Statistical Association, 343–48. https://doi.org/ 10.25080/Majora-92bf1922-00a .\n\n\nMcDowell, A, A Engel, J T Massey, and K Maurer. 1981. “Lan and Operation of the Second National Health and Nutrition Examination Survey, 1976–1980.” Vital and Health Statistics 1 (15): 1–144."
  },
  {
    "objectID": "pages/categorical.html",
    "href": "pages/categorical.html",
    "title": "Overview",
    "section": "",
    "text": "Section 1: Tabulation  Section 2: T-Test \nAgresti (2013) provides an overview of these methods.\n\n\n\n\nReferences\n\nAgresti, Alan. 2013. Categorical Data Analysis, 3rd edn. John Wiley & Sons, Hoboken, New Jersey."
  },
  {
    "objectID": "pages/estimation_rep.html",
    "href": "pages/estimation_rep.html",
    "title": "Replicated-based Estimation",
    "section": "",
    "text": "Bootstrap\n\nfrom samplics.datasets import load_nhanes2brr, load_nhanes2jk, load_nmihs\nfrom samplics.estimation import ReplicateEstimator\n\n\n# Load NMIHS sample data\nnmihs_dict = load_nmihs()\nnmihs = nmihs_dict[\"data\"]\n\nnmihs.head(15)\n\n\n\n\n\n  \n    \n      \n      finalwgt\n      birth_weight\n      bsrw1\n      bsrw2\n      bsrw3\n      bsrw4\n      bsrw5\n      bsrw6\n      bsrw7\n      bsrw8\n      ...\n      bsrw41\n      bsrw42\n      bsrw43\n      bsrw44\n      bsrw45\n      bsrw46\n      bsrw47\n      bsrw48\n      bsrw49\n      bsrw50\n    \n  \n  \n    \n      0\n      24.67243\n      1270\n      49.403603\n      0.000000\n      49.403603\n      0.000000\n      24.701801\n      49.403603\n      24.701801\n      0.000000\n      ...\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      49.403603\n      0.000000\n      74.105408\n      49.403603\n      24.701801\n      49.403603\n    \n    \n      1\n      23.56827\n      879\n      23.596327\n      47.192654\n      0.000000\n      0.000000\n      47.192654\n      23.596327\n      47.192654\n      23.596327\n      ...\n      47.192654\n      23.596327\n      0.000000\n      47.192654\n      23.596327\n      47.192654\n      23.596327\n      47.192654\n      23.596327\n      23.596327\n    \n    \n      2\n      24.67243\n      794\n      24.701801\n      0.000000\n      24.701801\n      0.000000\n      0.000000\n      24.701801\n      0.000000\n      0.000000\n      ...\n      24.701801\n      0.000000\n      0.000000\n      24.701801\n      24.701801\n      24.701801\n      0.000000\n      49.403603\n      24.701801\n      98.807205\n    \n    \n      3\n      20.33146\n      1446\n      40.711327\n      0.000000\n      0.000000\n      20.355663\n      40.711327\n      20.355663\n      0.000000\n      20.355663\n      ...\n      0.000000\n      20.355663\n      61.066994\n      61.066994\n      40.711327\n      40.711327\n      20.355663\n      20.355663\n      81.422653\n      40.711327\n    \n    \n      4\n      21.83328\n      830\n      21.859272\n      21.859272\n      0.000000\n      0.000000\n      0.000000\n      21.859272\n      0.000000\n      21.859272\n      ...\n      65.577812\n      0.000000\n      21.859272\n      21.859272\n      21.859272\n      0.000000\n      21.859272\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      5\n      23.56827\n      1304\n      70.788986\n      23.596327\n      23.596327\n      23.596327\n      0.000000\n      23.596327\n      47.192654\n      0.000000\n      ...\n      47.192654\n      47.192654\n      23.596327\n      23.596327\n      23.596327\n      23.596327\n      0.000000\n      23.596327\n      23.596327\n      0.000000\n    \n    \n      6\n      18.67915\n      1106\n      18.701387\n      56.104160\n      0.000000\n      0.000000\n      18.701387\n      18.701387\n      18.701387\n      0.000000\n      ...\n      18.701387\n      0.000000\n      18.701387\n      0.000000\n      18.701387\n      18.701387\n      18.701387\n      18.701387\n      18.701387\n      37.402775\n    \n    \n      7\n      24.63370\n      1418\n      24.663025\n      49.326050\n      0.000000\n      24.663025\n      0.000000\n      24.663025\n      0.000000\n      24.663025\n      ...\n      24.663025\n      0.000000\n      0.000000\n      0.000000\n      49.326050\n      49.326050\n      24.663025\n      0.000000\n      24.663025\n      0.000000\n    \n    \n      8\n      20.33146\n      1474\n      0.000000\n      40.711327\n      40.711327\n      0.000000\n      20.355663\n      0.000000\n      0.000000\n      40.711327\n      ...\n      40.711327\n      0.000000\n      20.355663\n      20.355663\n      20.355663\n      20.355663\n      0.000000\n      20.355663\n      20.355663\n      20.355663\n    \n    \n      9\n      20.33146\n      454\n      0.000000\n      20.355663\n      20.355663\n      20.355663\n      61.066994\n      0.000000\n      0.000000\n      40.711327\n      ...\n      0.000000\n      61.066994\n      0.000000\n      20.355663\n      0.000000\n      20.355663\n      20.355663\n      20.355663\n      81.422653\n      0.000000\n    \n    \n      10\n      24.67243\n      1380\n      0.000000\n      24.701801\n      24.701801\n      24.701801\n      0.000000\n      49.403603\n      0.000000\n      24.701801\n      ...\n      0.000000\n      49.403603\n      49.403603\n      0.000000\n      74.105408\n      24.701801\n      0.000000\n      24.701801\n      98.807205\n      49.403603\n    \n    \n      11\n      20.33146\n      539\n      61.066994\n      20.355663\n      20.355663\n      0.000000\n      20.355663\n      20.355663\n      40.711327\n      40.711327\n      ...\n      20.355663\n      40.711327\n      20.355663\n      40.711327\n      61.066994\n      0.000000\n      0.000000\n      20.355663\n      20.355663\n      20.355663\n    \n    \n      12\n      24.63370\n      1021\n      49.326050\n      24.663025\n      98.652100\n      24.663025\n      0.000000\n      73.989075\n      24.663025\n      0.000000\n      ...\n      24.663025\n      0.000000\n      49.326050\n      0.000000\n      24.663025\n      73.989075\n      73.989075\n      24.663025\n      24.663025\n      0.000000\n    \n    \n      13\n      21.83328\n      1049\n      65.577812\n      21.859272\n      21.859272\n      21.859272\n      0.000000\n      65.577812\n      21.859272\n      21.859272\n      ...\n      0.000000\n      65.577812\n      0.000000\n      0.000000\n      21.859272\n      43.718544\n      21.859272\n      43.718544\n      0.000000\n      21.859272\n    \n    \n      14\n      18.67915\n      1134\n      0.000000\n      18.701387\n      37.402775\n      0.000000\n      37.402775\n      0.000000\n      0.000000\n      56.104160\n      ...\n      18.701387\n      18.701387\n      0.000000\n      18.701387\n      0.000000\n      56.104160\n      0.000000\n      56.104160\n      0.000000\n      56.104160\n    \n  \n\n15 rows × 52 columns\n\n\n\nLet’s estimate the average birth weight using the bootstrap weights.\n\n# rep_wgt_boot = nmihsboot.loc[:, \"bsrw1\":\"bsrw50\"]\n\nbirthwgt = ReplicateEstimator(\"bootstrap\", \"mean\").estimate(\n    y=nmihs[\"birth_weight\"],\n    samp_weight=nmihs[\"finalwgt\"],\n    rep_weights=nmihs.loc[:, \"bsrw1\":\"bsrw50\"],\n    remove_nan=True,\n)\n\nprint(birthwgt)\n\nSAMPLICS - Estimation of Mean\n\nNumber of strata: None\nNumber of psus: None\nDegree of freedom: 49\n\n       MEAN        SE         LCI         UCI       CV\n2679.127143 31.053792 2616.722212 2741.532074 0.011591\n\n\n\n\nBalanced repeated replication (BRR)\n\n# Load NMIHS sample data\nnhanes2brr_dict = load_nhanes2brr()\nnhanes2brr = nhanes2brr_dict[\"data\"]\n\nnhanes2brr.head(15)\n\n\n\n\n\n  \n    \n      \n      height\n      weight\n      finalwgt\n      brr_1\n      brr_2\n      brr_3\n      brr_4\n      brr_5\n      brr_6\n      brr_7\n      ...\n      brr_23\n      brr_24\n      brr_25\n      brr_26\n      brr_27\n      brr_28\n      brr_29\n      brr_30\n      brr_31\n      brr_32\n    \n  \n  \n    \n      0\n      174.59801\n      62.480000\n      8995\n      0\n      17990\n      17990\n      0\n      17990\n      0\n      0\n      ...\n      17990\n      0\n      0\n      17990\n      17990\n      0\n      17990\n      0\n      0\n      17990\n    \n    \n      1\n      152.29700\n      48.759998\n      25964\n      0\n      51928\n      51928\n      0\n      51928\n      0\n      0\n      ...\n      51928\n      0\n      0\n      51928\n      51928\n      0\n      51928\n      0\n      0\n      51928\n    \n    \n      2\n      164.09801\n      67.250000\n      8752\n      0\n      17504\n      17504\n      0\n      17504\n      0\n      0\n      ...\n      17504\n      0\n      0\n      17504\n      17504\n      0\n      17504\n      0\n      0\n      17504\n    \n    \n      3\n      162.59801\n      94.459999\n      4310\n      0\n      8620\n      8620\n      0\n      8620\n      0\n      0\n      ...\n      8620\n      0\n      0\n      8620\n      8620\n      0\n      8620\n      0\n      0\n      8620\n    \n    \n      4\n      163.09801\n      74.279999\n      9011\n      0\n      18022\n      18022\n      0\n      18022\n      0\n      0\n      ...\n      18022\n      0\n      0\n      18022\n      18022\n      0\n      18022\n      0\n      0\n      18022\n    \n    \n      5\n      147.09801\n      66.000000\n      4310\n      0\n      8620\n      8620\n      0\n      8620\n      0\n      0\n      ...\n      8620\n      0\n      0\n      8620\n      8620\n      0\n      8620\n      0\n      0\n      8620\n    \n    \n      6\n      153.89799\n      54.549999\n      3201\n      0\n      6402\n      6402\n      0\n      6402\n      0\n      0\n      ...\n      6402\n      0\n      0\n      6402\n      6402\n      0\n      6402\n      0\n      0\n      6402\n    \n    \n      7\n      160.00000\n      58.970001\n      25386\n      0\n      50772\n      50772\n      0\n      50772\n      0\n      0\n      ...\n      50772\n      0\n      0\n      50772\n      50772\n      0\n      50772\n      0\n      0\n      50772\n    \n    \n      8\n      164.00000\n      68.949997\n      12102\n      0\n      24204\n      24204\n      0\n      24204\n      0\n      0\n      ...\n      24204\n      0\n      0\n      24204\n      24204\n      0\n      24204\n      0\n      0\n      24204\n    \n    \n      9\n      176.59801\n      65.430000\n      4312\n      0\n      8624\n      8624\n      0\n      8624\n      0\n      0\n      ...\n      8624\n      0\n      0\n      8624\n      8624\n      0\n      8624\n      0\n      0\n      8624\n    \n    \n      10\n      156.19901\n      76.769997\n      4031\n      0\n      8062\n      8062\n      0\n      8062\n      0\n      0\n      ...\n      8062\n      0\n      0\n      8062\n      8062\n      0\n      8062\n      0\n      0\n      8062\n    \n    \n      11\n      170.09801\n      58.400002\n      3628\n      0\n      7256\n      7256\n      0\n      7256\n      0\n      0\n      ...\n      7256\n      0\n      0\n      7256\n      7256\n      0\n      7256\n      0\n      0\n      7256\n    \n    \n      12\n      151.79700\n      65.769997\n      28590\n      0\n      57180\n      57180\n      0\n      57180\n      0\n      0\n      ...\n      57180\n      0\n      0\n      57180\n      57180\n      0\n      57180\n      0\n      0\n      57180\n    \n    \n      13\n      154.19901\n      48.540001\n      22754\n      0\n      45508\n      45508\n      0\n      45508\n      0\n      0\n      ...\n      45508\n      0\n      0\n      45508\n      45508\n      0\n      45508\n      0\n      0\n      45508\n    \n    \n      14\n      171.09801\n      73.029999\n      7119\n      0\n      14238\n      14238\n      0\n      14238\n      0\n      0\n      ...\n      14238\n      0\n      0\n      14238\n      14238\n      0\n      14238\n      0\n      0\n      14238\n    \n  \n\n15 rows × 35 columns\n\n\n\nLet’s estimate the average birth weight using the BRR weights.\n\nbrr = ReplicateEstimator(\"brr\", \"ratio\")\n\nratio_wgt_hgt = brr.estimate(\n    y=nhanes2brr[\"weight\"],\n    samp_weight=nhanes2brr[\"finalwgt\"],\n    x=nhanes2brr[\"height\"],\n    rep_weights=nhanes2brr.loc[:, \"brr_1\":\"brr_32\"],\n    remove_nan=True,\n)\n\nprint(ratio_wgt_hgt)\n\nSAMPLICS - Estimation of Ratio\n\nNumber of strata: None\nNumber of psus: None\nDegree of freedom: 16\n\n   RATIO      SE      LCI     UCI       CV\n0.426082 0.00273 0.420295 0.43187 0.006407\n\n\n\n\nJackknife\n\n# Load NMIHS sample data\nnhanes2jk_dict = load_nhanes2jk()\nnhanes2jk = nhanes2jk_dict[\"data\"]\n\nnhanes2jk.head(15)\n\n\n\n\n\n  \n    \n      \n      height\n      weight\n      finalwgt\n      jkw_1\n      jkw_2\n      jkw_3\n      jkw_4\n      jkw_5\n      jkw_6\n      jkw_7\n      ...\n      jkw_53\n      jkw_54\n      jkw_55\n      jkw_56\n      jkw_57\n      jkw_58\n      jkw_59\n      jkw_60\n      jkw_61\n      jkw_62\n    \n  \n  \n    \n      0\n      174.59801\n      62.480000\n      8995\n      0\n      17990\n      8995\n      8995\n      8995\n      8995\n      8995\n      ...\n      8995\n      8995\n      8995\n      8995\n      8995\n      8995\n      8995\n      8995\n      8995\n      8995\n    \n    \n      1\n      152.29700\n      48.759998\n      25964\n      0\n      51928\n      25964\n      25964\n      25964\n      25964\n      25964\n      ...\n      25964\n      25964\n      25964\n      25964\n      25964\n      25964\n      25964\n      25964\n      25964\n      25964\n    \n    \n      2\n      164.09801\n      67.250000\n      8752\n      0\n      17504\n      8752\n      8752\n      8752\n      8752\n      8752\n      ...\n      8752\n      8752\n      8752\n      8752\n      8752\n      8752\n      8752\n      8752\n      8752\n      8752\n    \n    \n      3\n      162.59801\n      94.459999\n      4310\n      0\n      8620\n      4310\n      4310\n      4310\n      4310\n      4310\n      ...\n      4310\n      4310\n      4310\n      4310\n      4310\n      4310\n      4310\n      4310\n      4310\n      4310\n    \n    \n      4\n      163.09801\n      74.279999\n      9011\n      0\n      18022\n      9011\n      9011\n      9011\n      9011\n      9011\n      ...\n      9011\n      9011\n      9011\n      9011\n      9011\n      9011\n      9011\n      9011\n      9011\n      9011\n    \n    \n      5\n      147.09801\n      66.000000\n      4310\n      0\n      8620\n      4310\n      4310\n      4310\n      4310\n      4310\n      ...\n      4310\n      4310\n      4310\n      4310\n      4310\n      4310\n      4310\n      4310\n      4310\n      4310\n    \n    \n      6\n      153.89799\n      54.549999\n      3201\n      0\n      6402\n      3201\n      3201\n      3201\n      3201\n      3201\n      ...\n      3201\n      3201\n      3201\n      3201\n      3201\n      3201\n      3201\n      3201\n      3201\n      3201\n    \n    \n      7\n      160.00000\n      58.970001\n      25386\n      0\n      50772\n      25386\n      25386\n      25386\n      25386\n      25386\n      ...\n      25386\n      25386\n      25386\n      25386\n      25386\n      25386\n      25386\n      25386\n      25386\n      25386\n    \n    \n      8\n      164.00000\n      68.949997\n      12102\n      0\n      24204\n      12102\n      12102\n      12102\n      12102\n      12102\n      ...\n      12102\n      12102\n      12102\n      12102\n      12102\n      12102\n      12102\n      12102\n      12102\n      12102\n    \n    \n      9\n      176.59801\n      65.430000\n      4312\n      0\n      8624\n      4312\n      4312\n      4312\n      4312\n      4312\n      ...\n      4312\n      4312\n      4312\n      4312\n      4312\n      4312\n      4312\n      4312\n      4312\n      4312\n    \n    \n      10\n      156.19901\n      76.769997\n      4031\n      0\n      8062\n      4031\n      4031\n      4031\n      4031\n      4031\n      ...\n      4031\n      4031\n      4031\n      4031\n      4031\n      4031\n      4031\n      4031\n      4031\n      4031\n    \n    \n      11\n      156.69901\n      57.040001\n      3813\n      7626\n      0\n      3813\n      3813\n      3813\n      3813\n      3813\n      ...\n      3813\n      3813\n      3813\n      3813\n      3813\n      3813\n      3813\n      3813\n      3813\n      3813\n    \n    \n      12\n      182.00000\n      99.110001\n      7445\n      14890\n      0\n      7445\n      7445\n      7445\n      7445\n      7445\n      ...\n      7445\n      7445\n      7445\n      7445\n      7445\n      7445\n      7445\n      7445\n      7445\n      7445\n    \n    \n      13\n      158.29700\n      84.480003\n      3528\n      7056\n      0\n      3528\n      3528\n      3528\n      3528\n      3528\n      ...\n      3528\n      3528\n      3528\n      3528\n      3528\n      3528\n      3528\n      3528\n      3528\n      3528\n    \n    \n      14\n      152.89799\n      70.309998\n      7790\n      15580\n      0\n      7790\n      7790\n      7790\n      7790\n      7790\n      ...\n      7790\n      7790\n      7790\n      7790\n      7790\n      7790\n      7790\n      7790\n      7790\n      7790\n    \n  \n\n15 rows × 65 columns\n\n\n\nIn this case, stratification was used to calculate the jackknife weights. The stratum variable is not indicated in the dataset or survey design description. However, it says that the number of strata is 31 and the number of replicates is 62. Hence, the jackknife replicate coefficient is \\((n_h - 1) / n_h = (2-1) / 2 = 0.5\\). Now we can call replicate() and specify rep_coefs = 0.5.\n\njackknife = ReplicateEstimator(\"jackknife\", \"ratio\")\n\nratio_wgt_hgt2 = jackknife.estimate(\n    y=nhanes2jk[\"weight\"],\n    samp_weight=nhanes2jk[\"finalwgt\"],\n    x=nhanes2jk[\"height\"],\n    rep_weights=nhanes2jk.loc[:, \"jkw_1\":\"jkw_62\"],\n    rep_coefs=0.5,\n    remove_nan=True,\n)\n\nprint(ratio_wgt_hgt2)\n\nSAMPLICS - Estimation of Ratio\n\nNumber of strata: None\nNumber of psus: None\nDegree of freedom: 61\n\n   RATIO       SE      LCI      UCI      CV\n0.423502 0.003464 0.416574 0.430429 0.00818"
  },
  {
    "objectID": "pages/weight.html",
    "href": "pages/weight.html",
    "title": "Overview",
    "section": "",
    "text": "The weighting tutorial is in two parts. The first part discusses several weight adjustments methods e.g. non-response adjustment, poststratification, calibration. The second part of the tutorial walks the user through the creation of replicate weights using Booststrap, Balanced Repeated Replication (BRR), and Jackknife methods.\nSection 1: Sample weight adjustments  Section 2: Replicates weights \nValliant, R. and Dever, J. A. (2018) (Valliant and Dever 2018) provides a step-by-step guide on calculating sample weights.\n\n\n\n\nReferences\n\nValliant, R, and J A Dever. 2018. Survey Weights: A Step-by-Step Guide to Calculation. Stata Press."
  },
  {
    "objectID": "pages/selection_psus.html",
    "href": "pages/selection_psus.html",
    "title": "Selection of PSUs",
    "section": "",
    "text": "In the sections below, we draw primary sampling units (PSUs) using probability proportional to size (PPS) sampling techniques implemented in the Sample class. The class Sample has two main methods that is inclusion_probs and select. The method inclusion_probs() computes the probability of selection and select() draws the random samples.\nThe following will illustrate the use of samplics for sample selection. For the illustration,\nThis example is not meant to be exhaustif. There are many use cases that are not covered in this tutorial. For example, some PSUs may be segmented due to their size and segments selected in a subsequent step. Segment selection can be done with Samplics in a similar way as the PSUs selection, with PPS or SRS, after the segements have been created by the user.\nFirst, let us import the python packages necessary to run the tutorial."
  },
  {
    "objectID": "pages/selection_psus.html#sample-dataset",
    "href": "pages/selection_psus.html#sample-dataset",
    "title": "Selection of PSUs",
    "section": "Sample Dataset",
    "text": "Sample Dataset\nThe file sample_frame.csv - shown below - contains synthetic data of 100 clusters classified by region (East, North, South and West). Clusters represent a group of households. In the file, each cluster has an associated number of households (number_households) and a status variable indicating whether the cluster is in scope or not.\nThis synthetic data represents a simplified version of enumeration areas (EAs) frames found in many countries and used by major household survey programs such as the Demographic and Health Surveys (DHS), the Population-based HIV Impact Assessment (PHIA) surveys and the Multiple Cluster Indicator Surveys (MICS).\n\npsu_frame_dict = load_psu_frame()\npsu_frame = psu_frame_dict[\"data\"]\npsu_frame.head(25)\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      number_households_census\n      cluster_status\n      comment\n    \n  \n  \n    \n      0\n      1\n      North\n      105\n      1\n      NaN\n    \n    \n      1\n      2\n      North\n      85\n      1\n      NaN\n    \n    \n      2\n      3\n      North\n      95\n      1\n      NaN\n    \n    \n      3\n      4\n      North\n      75\n      1\n      NaN\n    \n    \n      4\n      5\n      North\n      120\n      1\n      NaN\n    \n    \n      5\n      6\n      North\n      90\n      1\n      NaN\n    \n    \n      6\n      7\n      North\n      130\n      1\n      NaN\n    \n    \n      7\n      8\n      North\n      55\n      1\n      NaN\n    \n    \n      8\n      9\n      North\n      30\n      1\n      NaN\n    \n    \n      9\n      10\n      North\n      600\n      1\n      due to a large building\n    \n    \n      10\n      11\n      South\n      25\n      1\n      NaN\n    \n    \n      11\n      12\n      South\n      250\n      1\n      NaN\n    \n    \n      12\n      13\n      South\n      105\n      1\n      NaN\n    \n    \n      13\n      14\n      South\n      75\n      1\n      NaN\n    \n    \n      14\n      15\n      South\n      205\n      1\n      NaN\n    \n    \n      15\n      16\n      South\n      190\n      1\n      NaN\n    \n    \n      16\n      17\n      South\n      95\n      1\n      NaN\n    \n    \n      17\n      18\n      South\n      85\n      1\n      NaN\n    \n    \n      18\n      19\n      South\n      50\n      1\n      NaN\n    \n    \n      19\n      20\n      South\n      110\n      1\n      NaN\n    \n    \n      20\n      21\n      South\n      130\n      1\n      NaN\n    \n    \n      21\n      22\n      South\n      180\n      1\n      NaN\n    \n    \n      22\n      23\n      South\n      65\n      1\n      NaN\n    \n    \n      23\n      24\n      South\n      75\n      1\n      NaN\n    \n    \n      24\n      25\n      South\n      95\n      1\n      NaN\n    \n  \n\n\n\n\nOften, sampling frames are not available for the sampling units of interest. For example, most countries do not have a list of all households or people living in the country. Even if such frames exist, it may not be operationally and financially feasible to directly select sampling units without any form of clustering.\nHence, stage sampling is a common strategy used by large household national surveys for selecting samples of households and people. At the first stage, geographic or administrative clusters of households are selected. At the second stage, a frame of households is created from the selected clusters and a sample of households is selected. At the third stage (if applicable), a sample of people is selected from the households in the sample. This is a high level description of the process; usually implementations are much less straightforward and may require many adjustments to address complexities."
  },
  {
    "objectID": "pages/selection_psus.html#psu-probability-of-selection",
    "href": "pages/selection_psus.html#psu-probability-of-selection",
    "title": "Selection of PSUs",
    "section": "PSU Probability of Selection",
    "text": "PSU Probability of Selection\nAt the first stage, we use the proportional to size (pps) method to select a random sample of clusters. The measure of size is the number of households (number_households) as provided in the psu sampling frame. The sample is stratified by region. The probabilities, for stratified pps, is obtained as follow: \\[\\begin{equation} p_{hi} = \\frac{n_h M_{hi}}{\\sum_{i=1}^{N_h}{M_{hi}}} \\end{equation}\\] where \\(p_{hi}\\) is the probability of selection for unit \\(i\\) from stratum \\(h\\), \\(M_{hi}\\) is the measure of size (mos), \\(n_h\\) and \\(N_h\\) are the sample size and the total number of clusters in stratum \\(h\\), respectively.\n\n\n\n\n\n\nImportant\n\n\n\nThe PPS method is used in many surveys not just for multistage household surveys.\nFor example, in business surveys, establishments can greatly vary in size; hence pps methods are often use to select samples. Simarly, facility-based surveys can benefit from pps methods when frames with measures of size are available."
  },
  {
    "objectID": "pages/selection_psus.html#psu-sample-size",
    "href": "pages/selection_psus.html#psu-sample-size",
    "title": "Selection of PSUs",
    "section": "PSU Sample size",
    "text": "PSU Sample size\nFor a stratified sampling design, the sample size is provided using a Python dictionary. Python dictionaries allow us to pair the strata with the sample sizes. Let’s say that we want to select 3 clusters from stratum East, 2 from West, 2 from North and 3 from South. The snippet of code below demonstrates how to create the Python dictionary. Note that it is important to correctly spell out the keys of the dictionary which corresponds to the values of the variable stratum (in our case it’s region).\n\npsu_sample_size = {\"East\":3, \"West\": 2, \"North\": 2, \"South\": 3}\n\nprint(f\"\\nThe sample size per domain is:\\n {psu_sample_size}\\n\")\n\n\nThe sample size per domain is:\n {'East': 3, 'West': 2, 'North': 2, 'South': 3}\n\n\n\nThe function array_to_dict() converts an array to a dictionnary by pairing the values of the array to their frequency. We can use this function to calculates the number of clusters per stratum and store the result in a Python dictionnary. Then, we modify the values of the dictionnary to create the sample size dictionnary.\nIf some of the clusters are certainties then an exception will be raised. Hence, the user will have to manually handle the certaininties. Better handling of certainties is planned for future versions of the library samplics.\n\nfrom samplics import array_to_dict\n\nframe_size = array_to_dict(psu_frame[\"region\"])\nprint(f\"\\nThe number of clusters per stratum is:\\n {frame_size}\")\n\n\nThe number of clusters per stratum is:\n {'East': 25, 'North': 10, 'South': 20, 'West': 45}\n\n\n\npsu_sample_size = frame_size.copy()\npsu_sample_size[\"East\"] = 3\npsu_sample_size[\"North\"] = 2\npsu_sample_size[\"South\"] = 3\npsu_sample_size[\"West\"] = 2\nprint(f\"\\nThe sample size per stratum is:\\n {psu_sample_size}\\n\")\n\n\nThe sample size per stratum is:\n {'East': 3, 'North': 2, 'South': 3, 'West': 2}\n\n\n\n\nstage1_design = SampleSelection(method=\"pps-sys\", stratification=True, with_replacement=False)\n\npsu_frame[\"psu_prob\"] = stage1_design.inclusion_probs(\n    psu_frame[\"cluster\"], \n    psu_sample_size, \n    psu_frame[\"region\"],\n    psu_frame[\"number_households_census\"],\n    )\n\nnb_obs = 15\nprint(f\"\\nFirst {nb_obs} observations of the PSU frame \\n\")\npsu_frame.head(nb_obs)\n\n\nFirst 15 observations of the PSU frame \n\n\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      number_households_census\n      cluster_status\n      comment\n      psu_prob\n    \n  \n  \n    \n      0\n      1\n      North\n      105\n      1\n      NaN\n      0.151625\n    \n    \n      1\n      2\n      North\n      85\n      1\n      NaN\n      0.122744\n    \n    \n      2\n      3\n      North\n      95\n      1\n      NaN\n      0.137184\n    \n    \n      3\n      4\n      North\n      75\n      1\n      NaN\n      0.108303\n    \n    \n      4\n      5\n      North\n      120\n      1\n      NaN\n      0.173285\n    \n    \n      5\n      6\n      North\n      90\n      1\n      NaN\n      0.129964\n    \n    \n      6\n      7\n      North\n      130\n      1\n      NaN\n      0.187726\n    \n    \n      7\n      8\n      North\n      55\n      1\n      NaN\n      0.079422\n    \n    \n      8\n      9\n      North\n      30\n      1\n      NaN\n      0.043321\n    \n    \n      9\n      10\n      North\n      600\n      1\n      due to a large building\n      0.866426\n    \n    \n      10\n      11\n      South\n      25\n      1\n      NaN\n      0.027523\n    \n    \n      11\n      12\n      South\n      250\n      1\n      NaN\n      0.275229\n    \n    \n      12\n      13\n      South\n      105\n      1\n      NaN\n      0.115596\n    \n    \n      13\n      14\n      South\n      75\n      1\n      NaN\n      0.082569\n    \n    \n      14\n      15\n      South\n      205\n      1\n      NaN\n      0.225688"
  },
  {
    "objectID": "pages/selection_psus.html#psu-selection",
    "href": "pages/selection_psus.html#psu-selection",
    "title": "Selection of PSUs",
    "section": "PSU Selection",
    "text": "PSU Selection\nIn this section, we select a sample of psus using pps methods. In the section above, we have calculated the probabilities of selection. That step is not necessary when using samplics. We can use the method select() to calculate the probability of selection and select the sample, in one run. As shown below, select() method returns a tuple of three arrays.\n* The first array indicates the selected units (i.e. psu_sample = 1 if selected, and 0 if not selected).\n* The second array provides the number of hits, useful when the sample is selected with replacement.\n* The third array is the probability of selection.\n\n\n\n\n\n\nNote\n\n\n\nnp.random.seed() fixes the random seed to allow us to reproduce the random selection.\n\n\n\nnp.random.seed(23)\n\npsu_frame[\"psu_sample\"], psu_frame[\"psu_hits\"], psu_frame[\"psu_probs\"] = \\\n    stage1_design.select(\n        psu_frame[\"cluster\"], \n        psu_sample_size, \n        psu_frame[\"region\"], \n        psu_frame[\"number_households_census\"]\n    )\n    \npsu_frame.to_csv(\"./psu_frame.csv\")\n\nprint(\n    \"\\nFirst 15 obs of the PSU frame with the sampling information\\n\"\n    )\npsu_frame[\n    [\"cluster\", \"region\", \"psu_prob\", \"psu_sample\", \"psu_hits\", \"psu_probs\"]\n    ].head(15)\n\n\nFirst 15 obs of the PSU frame with the sampling information\n\n\n\n\n\n\n\n  \n    \n      \n      cluster\n      region\n      psu_prob\n      psu_sample\n      psu_hits\n      psu_probs\n    \n  \n  \n    \n      0\n      1\n      North\n      0.151625\n      0\n      0\n      0.151625\n    \n    \n      1\n      2\n      North\n      0.122744\n      0\n      0\n      0.122744\n    \n    \n      2\n      3\n      North\n      0.137184\n      0\n      0\n      0.137184\n    \n    \n      3\n      4\n      North\n      0.108303\n      0\n      0\n      0.108303\n    \n    \n      4\n      5\n      North\n      0.173285\n      0\n      0\n      0.173285\n    \n    \n      5\n      6\n      North\n      0.129964\n      0\n      0\n      0.129964\n    \n    \n      6\n      7\n      North\n      0.187726\n      1\n      1\n      0.187726\n    \n    \n      7\n      8\n      North\n      0.079422\n      0\n      0\n      0.079422\n    \n    \n      8\n      9\n      North\n      0.043321\n      0\n      0\n      0.043321\n    \n    \n      9\n      10\n      North\n      0.866426\n      1\n      1\n      0.866426\n    \n    \n      10\n      11\n      South\n      0.027523\n      0\n      0\n      0.027523\n    \n    \n      11\n      12\n      South\n      0.275229\n      0\n      0\n      0.275229\n    \n    \n      12\n      13\n      South\n      0.115596\n      0\n      0\n      0.115596\n    \n    \n      13\n      14\n      South\n      0.082569\n      0\n      0\n      0.082569\n    \n    \n      14\n      15\n      South\n      0.225688\n      0\n      0\n      0.225688\n    \n  \n\n\n\n\nThe default setting sample_only=False returns the entire frame. We can easily reduce the output data to the sample by filtering i.e. psu_sample == 1. However, if we are only interested in the sample, we could use sample_only=True when calling select(). This will reduce the output data to the sampled units and to_dataframe=true will convert the data to a pandas dataframe (pd.DataFrame). Note that the columns in the dataframe will be reduced to the minimum.\n\nnp.random.seed(23)\n\npsu_sample = stage1_design.select(\n    psu_frame[\"cluster\"], \n    psu_sample_size, \n    psu_frame[\"region\"], \n    psu_frame[\"number_households_census\"],\n    to_dataframe = True,\n    sample_only = True\n    )\n\nprint(\"\\nPSU sample without the non-sampled units\\n\")\npsu_sample\n\n\nPSU sample without the non-sampled units\n\n\n\n\n\n\n\n  \n    \n      \n      _samp_unit\n      _stratum\n      _mos\n      _sample\n      _hits\n      _probs\n    \n  \n  \n    \n      0\n      7\n      North\n      130\n      1\n      1\n      0.187726\n    \n    \n      1\n      10\n      North\n      600\n      1\n      1\n      0.866426\n    \n    \n      2\n      16\n      South\n      190\n      1\n      1\n      0.209174\n    \n    \n      3\n      24\n      South\n      75\n      1\n      1\n      0.082569\n    \n    \n      4\n      29\n      South\n      200\n      1\n      1\n      0.220183\n    \n    \n      5\n      34\n      East\n      305\n      1\n      1\n      0.210587\n    \n    \n      6\n      45\n      East\n      450\n      1\n      1\n      0.310702\n    \n    \n      7\n      52\n      East\n      700\n      1\n      1\n      0.483314\n    \n    \n      8\n      64\n      West\n      300\n      1\n      1\n      0.091673\n    \n    \n      9\n      86\n      West\n      280\n      1\n      1\n      0.085561\n    \n  \n\n\n\n\nThe systematic selection method can be implemented with or without replacement. The other samplics algorithms for selecting sample with unequal probablities of selection are Brewer, Hanurav-Vijayan (hv), Murphy, and Rao-Sampford (rs) methods. As shown below, all these sampling techniques can be specified when extentiating a Sample class; then call select() to draw samples.\n\nSample(method=\"pps-sys\", with_replacement=True)\nSample(method=\"pps-sys\", with_replacement=False)\nSample(method=\"pps-brewer\", with_replacement=False)\nSample(method=\"pps-hv\", with_replacement=False) # Hanurav-Vijayan method\nSample(method=\"pps-murphy\", with_replacement=False)\nSample(method=\"pps-sampford\", with_replacement=False) # Rao-Sampford method\n\nFor example, if we wanted to select the sample using the Rao-Sampford method, we could use the following snippet of code.\n\nnp.random.seed(23)\n\nstage1_sampford = SampleSelection(\n    method=\"pps-rs\", \n    stratification=True, \n    with_replacement=False\n    )\n\npsu_sample_sampford = stage1_sampford.select(\n    psu_frame[\"cluster\"], \n    psu_sample_size, \n    psu_frame[\"region\"], \n    psu_frame[\"number_households_census\"],\n    to_dataframe=True,\n    sample_only=False\n    )\n\npsu_sample_sampford\n\n\n\n\n\n  \n    \n      \n      _samp_unit\n      _stratum\n      _mos\n      _sample\n      _hits\n      _probs\n    \n  \n  \n    \n      0\n      1\n      North\n      105\n      0\n      0\n      0.151625\n    \n    \n      1\n      2\n      North\n      85\n      0\n      0\n      0.122744\n    \n    \n      2\n      3\n      North\n      95\n      1\n      1\n      0.137184\n    \n    \n      3\n      4\n      North\n      75\n      0\n      0\n      0.108303\n    \n    \n      4\n      5\n      North\n      120\n      0\n      0\n      0.173285\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      95\n      96\n      West\n      95\n      1\n      1\n      0.029030\n    \n    \n      96\n      97\n      West\n      40\n      0\n      0\n      0.012223\n    \n    \n      97\n      98\n      West\n      105\n      0\n      0\n      0.032086\n    \n    \n      98\n      99\n      West\n      320\n      0\n      0\n      0.097785\n    \n    \n      99\n      100\n      West\n      200\n      0\n      0\n      0.061115\n    \n  \n\n100 rows × 6 columns"
  }
]
